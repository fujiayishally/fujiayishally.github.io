<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shally&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fujiayishally.github.io/"/>
  <updated>2019-07-22T14:55:38.649Z</updated>
  <id>https://fujiayishally.github.io/</id>
  
  <author>
    <name>Shally Fu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>waving underline 滚动的下划线</title>
    <link href="https://fujiayishally.github.io/2019/07/22/waving-underline/"/>
    <id>https://fujiayishally.github.io/2019/07/22/waving-underline/</id>
    <published>2019-07-22T07:03:01.000Z</published>
    <updated>2019-07-22T14:55:38.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🤔问题"><a href="#🤔问题" class="headerlink" title="🤔问题"></a>🤔问题</h2><p>在浏览张鑫旭前辈的博客时看到了这个下滑波浪线的效果，并参考了前辈的<a href="https://www.zhangxinxu.com/wordpress/2019/04/css-wave-wavy-animation/" target="_blank" rel="noopener">《CSS实现文字下面波浪线动画效果》</a>一文，自己也对照着实现了一下。本文主要是对纯CSS实现波浪下划线效果的思路分析。在继续往下看之前，屏幕前的你会想着怎么实现呢？</p><h2 id="💡思路"><a href="#💡思路" class="headerlink" title="💡思路"></a>💡思路</h2><p>实现思路有三个关键点：一是使用径向渐变画两个圈圈；二是利用background的大小、位置、重复等属性调整圈圈，实现波浪效果；三是做成动画animation让波浪动起来。如果你并不能马上回忆起径向渐变的相关知识点，页底给出了MDN连接。下面就一步步来实现这个效果。</p><h3 id="Step1-画两个圈"><a href="#Step1-画两个圈" class="headerlink" title="Step1:画两个圈"></a>Step1:画两个圈</h3><p>现在给一个<code>div</code>设置 <code>20*20</code>大小的背景图，并放置在元素左下角。背景图上以中心为圆心，画两个圈圈，分别为蓝色和红色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wave-underline</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>:<span class="built_in">radial-gradient</span>(circle at 10px 10px,transparent 9px,red 9px,red 10px,transparent 10px),</span><br><span class="line">                     <span class="built_in">radial-gradient</span>(circle at 10px 10px,transparent 9px,blue 9px,blue 10px,transparent 10px);</span><br><span class="line">    <span class="attribute">background-size</span>:<span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-position</span>:<span class="number">0px</span> <span class="number">100%</span>,<span class="number">0px</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><style>    .wave-underline1{        background-image:radial-gradient(circle at 10px 10px,transparent 9px,red 9px,red 10px,transparent 10px),                         radial-gradient(circle at 10px 10px,transparent 9px,blue 9px,blue 10px,transparent 10px);        background-size:20px 20px;        background-repeat: no-repeat;        background-position:0px 100%,0px 100%;        border:solid 1px black;    }</style><div class="wave-underline1">&nbsp;</div><p>因为两个圈圈除了颜色，其他设置一模一样，所以重叠了。</p><h3 id="Step2-移动两个圈圈的圆心坐标"><a href="#Step2-移动两个圈圈的圆心坐标" class="headerlink" title="Step2:移动两个圈圈的圆心坐标"></a>Step2:移动两个圈圈的圆心坐标</h3><p>分别移动两个圆的圆心垂直坐标，因为超出背景范围的部分不会被渲染，所以看起来就像圆被裁掉了。现仅保留每个圆3px高的圆弧，即一个圆向下移动<code>17px</code>,此时垂直坐标为<code>17px+10px=27px</code>,同样另一个圆向上移动后坐标为<code>10px-17px=-7px</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:radial-gradient(circle</span> <span class="selector-tag">at</span> 10<span class="selector-tag">px</span> 27<span class="selector-tag">px</span>,<span class="selector-tag">transparent</span> 9<span class="selector-tag">px</span>,<span class="selector-tag">red</span> 9<span class="selector-tag">px</span>,<span class="selector-tag">red</span> 10<span class="selector-tag">px</span>,<span class="selector-tag">transparent</span> 10<span class="selector-tag">px</span>),                                 <span class="selector-tag">radial-gradient</span>(<span class="selector-tag">circle</span> <span class="selector-tag">at</span> 10<span class="selector-tag">px</span> <span class="selector-tag">-7px</span>,<span class="selector-tag">transparent</span> 9<span class="selector-tag">px</span>,<span class="selector-tag">blue</span> 9<span class="selector-tag">px</span>,<span class="selector-tag">blue</span> 10<span class="selector-tag">px</span>,<span class="selector-tag">transparent</span> 10<span class="selector-tag">px</span>)</span><br><span class="line"><span class="selector-tag">background-position</span><span class="selector-pseudo">:0px</span> 100%,0<span class="selector-tag">px</span> 100%;</span><br></pre></td></tr></table></figure><style>    .wave-underline2{        background-image:radial-gradient(circle at 10px 27px,transparent 9px,red 9px,red 10px,transparent 10px),                             radial-gradient(circle at 10px -7px,transparent 9px,blue 9px,blue 10px,transparent 10px);        background-size:20px 20px;        background-repeat: no-repeat;        background-position:0px 100%,0px 100%;        border:solid 1px black;    }</style><div class="wave-underline2">&nbsp;</div><h3 id="Step3-移动背景图位置"><a href="#Step3-移动背景图位置" class="headerlink" title="Step3:移动背景图位置"></a>Step3:移动背景图位置</h3><p>分别移动两个圆弧的<code>background-position</code>，使它们能够连续起来，这个时候可以把<code>background-repeat</code>设置成<code>repeat-x</code> 方便调试。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-repeat</span>: <span class="selector-tag">repeat-x</span>;</span><br><span class="line"><span class="selector-tag">background-position</span><span class="selector-pseudo">:-10px</span> <span class="selector-tag">calc</span>(100% <span class="selector-tag">-</span> 8<span class="selector-tag">px</span>),0<span class="selector-tag">px</span> <span class="selector-tag">calc</span>(100% + 10<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><style>    .wave-underline3{        background-image:radial-gradient(circle at 10px 27px,transparent 9px,red 9px,red 10px,transparent 10px),                             radial-gradient(circle at 10px -7px,transparent 9px,blue 9px,blue 10px,transparent 10px);        background-size:20px 20px;        background-repeat: repeat-x;        background-position:-10px calc(100% - 8px),0px calc(100% + 10px);        border:solid 1px black;    }</style><div class="wave-underline3">&nbsp;</div><h3 id="Step4-使波浪动起来"><a href="#Step4-使波浪动起来" class="headerlink" title="Step4:使波浪动起来"></a>Step4:使波浪动起来</h3><p>定义一个移动动画：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> movingWaving&#123;</span><br><span class="line">    <span class="selector-tag">from</span>&#123;<span class="attribute">background-position-x</span>:-<span class="number">10px</span>,<span class="number">0px</span>;&#125;</span><br><span class="line">    <span class="selector-tag">to</span>&#123;<span class="attribute">background-position-x</span>:-<span class="number">30px</span>,-<span class="number">10px</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用动画：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">animation</span><span class="selector-pseudo">:1s</span> <span class="selector-tag">movingWaving</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span><br></pre></td></tr></table></figure><style>    @keyframes movingWaving{        from{background-position-x:0px,10px;}        to{background-position-x:-20px,-10px;}    }    .wave-underline4{        background-image:radial-gradient(circle at 10px 27px,transparent 9px,red 9px,red 10px,transparent 10px),                             radial-gradient(circle at 10px -7px,transparent 9px,blue 9px,blue 10px,transparent 10px);        background-size:20px 20px;        background-repeat: repeat-x;        background-position:-10px calc(100% - 8px),0px calc(100% + 10px);        border:solid 1px black;        animation:1s movingWaving infinite linear;    }</style><div class="wave-underline4">&nbsp;</div><h2 id="🎉解决方案"><a href="#🎉解决方案" class="headerlink" title="🎉解决方案"></a>🎉解决方案</h2><p>一步一步走下来，代码思路是不是清晰了很多呢？最后一步是统一颜色，如果希望波浪线能够自动和字体颜色同步，可以用<code>currentcolor</code>代替具体的颜色值。最后给出全部实现代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> @<span class="keyword">keyframes</span> movingWaving&#123;</span><br><span class="line">        <span class="selector-tag">from</span>&#123;<span class="attribute">background-position-x</span>:<span class="number">0px</span>,<span class="number">10px</span>;&#125;</span><br><span class="line">        <span class="selector-tag">to</span>&#123;<span class="attribute">background-position-x</span>:-<span class="number">20px</span>,-<span class="number">10px</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="selector-class">.wave-underline</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.wave-underline</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>:<span class="built_in">radial-gradient</span>(circle at 10px 27px,transparent 9px,currentcolor 9px,currentcolor 10px,transparent 10px),                             </span><br><span class="line">                    <span class="built_in">radial-gradient</span>(circle at 10px -7px,transparent 9px,currentcolor 9px,currentcolor 10px,transparent 10px);</span><br><span class="line">    <span class="attribute">background-size</span>:<span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line">    <span class="attribute">background-position</span>:-<span class="number">10px</span> <span class="built_in">calc</span>(100% - 8px),<span class="number">0px</span> <span class="built_in">calc</span>(100% + 10px);</span><br><span class="line">    <span class="attribute">animation</span>:<span class="number">1s</span> movingWaving infinite linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><style> @keyframes movingWaving{        from{background-position-x:0px,10px;}        to{background-position-x:-20px,-10px;}    }.wave-underline{    padding:6px;    display:inline-block;    color:orange;}.wave-underline:hover,.wave-underline:focus{    background-image:radial-gradient(circle at 10px 27px,transparent 9px,currentcolor 9px,currentcolor 10px,transparent 10px),                                                 radial-gradient(circle at 10px -7px,transparent 9px,currentcolor 9px,currentcolor 10px,transparent 10px);    background-size:20px 20px;    background-repeat: repeat-x;    background-position:-10px calc(100% - 8px),0px calc(100% + 10px);    animation:1s movingWaving infinite linear;}</style><div class="wave-underline">试试把鼠标移到我身上</div><h2 id="🚧注意"><a href="#🚧注意" class="headerlink" title="🚧注意"></a>🚧注意</h2><p>仔细观察，其实纯css实现的波浪线并不是那么平滑，如果希望线条更完美，你可以用SVG图形方案。 下面给出代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> waveMove &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123; <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">100%</span>; &#125;</span><br><span class="line">  <span class="selector-tag">to</span>&#123; <span class="attribute">background-position</span>: -<span class="number">20px</span> <span class="number">100%</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.svg-wave</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.svg-wave</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 4'%3E%3Cpath fill='none' stroke='%23F30' d='M0 3.5c5 0 5-3 10-3s5 3 10 3 5-3 10-3 5 3 10 3'/%3E%3C/svg%3E"</span>) repeat-x <span class="number">0</span> <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">20px</span> auto;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">animation</span>: waveMove <span class="number">1s</span> infinite linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><style>@keyframes waveMove {  from { background-position: 0 100%; }  to{ background-position: -20px 100%; }}.svg-wave{    display:inline-block;}.svg-wave:hover,.svg-wave:focus{  background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 4'%3E%3Cpath fill='none' stroke='%23F30' d='M0 3.5c5 0 5-3 10-3s5 3 10 3 5-3 10-3 5 3 10 3'/%3E%3C/svg%3E") repeat-x 0 100%;  background-size: 20px auto;  animation: waveMove 1s infinite linear;}</style><div class="svg-wave">鼠标指向我看效果</div><p>这种方案的波浪线颜色需要手动修改。修改位置是 <code>stroke=&#39;%23F30&#39;</code>。其中<code>%23</code>就是<code>#</code>，现在的颜色就是<code>#F30</code>。如果要改颜色为<code>#333</code>，就是设置成<code>stroke=&#39;%23333&#39;</code>。</p><h2 id="🌵最后"><a href="#🌵最后" class="headerlink" title="🌵最后"></a>🌵最后</h2><ul><li>这是 <a href="https://codepen.io/fujiayishally/pen/zgvqzL" target="_blank" rel="noopener">本例代码</a>以供参考</li><li>本样式摘自张鑫旭前辈的博文<a href="https://www.zhangxinxu.com/wordpress/2019/04/css-wave-wavy-animation/" target="_blank" rel="noopener">《CSS实现文字下面波浪线动画效果》</a>，致谢</li><li>点<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/radial-gradient" target="_blank" rel="noopener">📖</a> 查看MDN里更多关于径向渐变的内容，致敬</li></ul>]]></content>
    
    <summary type="html">
    
      介绍一个纯CSS实现的滚动下滑波浪线。
    
    </summary>
    
      <category term="CSS" scheme="https://fujiayishally.github.io/categories/CSS/"/>
    
      <category term="前端" scheme="https://fujiayishally.github.io/categories/CSS/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="https://fujiayishally.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>BFC</title>
    <link href="https://fujiayishally.github.io/2019/07/17/BFC/"/>
    <id>https://fujiayishally.github.io/2019/07/17/BFC/</id>
    <published>2019-07-17T00:10:50.000Z</published>
    <updated>2019-07-19T12:55:53.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xxx"><a href="#xxx" class="headerlink" title="xxx"></a>xxx</h1><h2 id="🤔问题"><a href="#🤔问题" class="headerlink" title="🤔问题"></a>🤔问题</h2><h2 id="💡思路"><a href="#💡思路" class="headerlink" title="💡思路"></a>💡思路</h2><h2 id="🎉解决方案"><a href="#🎉解决方案" class="headerlink" title="🎉解决方案"></a>🎉解决方案</h2><h2 id="🚧注意"><a href="#🚧注意" class="headerlink" title="🚧注意"></a>🚧注意</h2><h2 id="🌵最后"><a href="#🌵最后" class="headerlink" title="🌵最后"></a>🌵最后</h2><ul><li>这是 <a href="xxx">本例代码</a>以供参考</li><li>本问题摘自xxx，致谢</li><li>点<a href="xxx">📖</a> 查看更多xxx，致敬</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;xxx&quot;&gt;&lt;a href=&quot;#xxx&quot; class=&quot;headerlink&quot; title=&quot;xxx&quot;&gt;&lt;/a&gt;xxx&lt;/h1&gt;&lt;h2 id=&quot;🤔问题&quot;&gt;&lt;a href=&quot;#🤔问题&quot; class=&quot;headerlink&quot; title=&quot;🤔问题&quot;&gt;&lt;/a&gt;🤔问
      
    
    </summary>
    
      <category term="前端" scheme="https://fujiayishally.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS相关" scheme="https://fujiayishally.github.io/categories/%E5%89%8D%E7%AB%AF/CSS%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>stacking context 层叠上下文</title>
    <link href="https://fujiayishally.github.io/2019/07/17/stacking-context/"/>
    <id>https://fujiayishally.github.io/2019/07/17/stacking-context/</id>
    <published>2019-07-17T00:09:36.000Z</published>
    <updated>2019-07-22T03:44:17.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="层叠上下文"><a href="#层叠上下文" class="headerlink" title="层叠上下文"></a>层叠上下文</h2><h3 id="什么是层叠上下文？"><a href="#什么是层叠上下文？" class="headerlink" title="什么是层叠上下文？"></a>什么是层叠上下文？</h3><p>在CSS中，每个盒子的位置其实都是三维的。除了平面的X轴和Y轴之外，盒子还会沿着“Z轴”（垂直屏幕靠近用户方向）一个一个地往上堆叠，亦即产生了视觉上的重叠效果。看一下标准文档中给出的示意图：</p><p><img src="1.JPG" alt="层叠上下文示意图"></p><p>这有个不太正确的类比，但也许能帮助你理解它们：层叠上下文就像JS中的执行上下文，内部维护了一些函数（元素盒子），不同函数在调用过程中形成了一个调用栈。元素盒子则是在定义时根据不同的定义方式获得了各自的层叠等级，它们按照层叠等级的高低也形成了一个栈，栈顶离用户最近。 </p><p>层叠上下文分两种，一种是根元素<code>&lt;body&gt;</code>自动创建的<strong>根层叠上下文(root stacking context)</strong>，另一种是其他元素创建的<strong>本地层叠上下文( local stacking contexts)</strong>。每个盒子都必属于某个层叠上下文，但不是每个盒子都能创建层叠上下文。下面将整理创建层叠上下文的各种方式。</p><h3 id="如何创建层叠上下文？"><a href="#如何创建层叠上下文？" class="headerlink" title="如何创建层叠上下文？"></a>如何创建层叠上下文？</h3><p>当一个元素创建了层叠上下文，此时它和两个上下文有关：一个是它所处的<strong>当前层叠上下文</strong>，另一个是<strong>新层叠上下文</strong>。新层叠上下文属于当前层叠上下文的一部分。</p><p>创建层叠上下文的方法有：</p><ol><li>前面提到的根元素<code>&lt;body&gt;</code>自动创建根层叠上下文</li><li><code>z-index:auto</code> 和 <code>z-index:0</code> 的<strong>定位元素</strong><blockquote><p>For those with ‘z-index: auto’, treat the element as if it created a new stacking context, but any positioned descendants and descendants which actually create a new stacking context should be considered part of the parent stacking context, not this new one.</p></blockquote></li></ol><p>对于<code>z-index:auto</code>的定位元素，它的定位后代，以及能够创建层叠上下文的后代，都属于当前上下文。所以可认为 <code>z-index:auto</code>元素并没有创建层叠上下文，而不是像文档所说的”treat the element as if it created a new stacking context”。</p><blockquote><p>For those with ‘z-index: 0’ treat the stacking context generated atomically.</p></blockquote><p><code>z-index:0</code> 的定位元素自动创建层叠上下文。它的后代元素属于新创建的层叠上下，与<code>z-index:0</code>定位元素所在的层叠上下文中的其他元素无关。</p><ol start="3"><li>元素的<code>opactity</code>属性值不为<code>1</code>。</li><li>元素的<code>transform</code>属性值不为<code>none</code>。</li><li>元素的<code>filter</code>属性值不为<code>1</code>。</li><li>当父元素是<code>display:flex|inline-flex</code>,后代元素的<code>z-index</code>不为<code>auto</code></li></ol><h2 id="层叠等级"><a href="#层叠等级" class="headerlink" title="层叠等级"></a>层叠等级</h2><h3 id="什么是层叠等级？"><a href="#什么是层叠等级？" class="headerlink" title="什么是层叠等级？"></a>什么是层叠等级？</h3><p>层叠上下文中可以包含多个元素盒子。每个盒子都有一个层叠等级（等级可以为负），层叠等级按大小排列形成了第三个轴——“Z轴”，垂直屏幕向用户延申增大。</p><p>需要注意的时<strong>层叠等级仅在当前层叠上下文中才有排序意义</strong>。创建当前层叠上下文的元素，相对再上一层的层叠上下文而言也有层叠等级。这两个层叠上下文中的层叠等级互不干扰。</p><p>同级的不一定是兄弟盒子，也可以是父子盒子；兄弟盒子也不一定等级相等；当等级相同时按 dom 树顺序从下到上堆叠。</p><h3 id="有哪些层叠等级？"><a href="#有哪些层叠等级？" class="headerlink" title="有哪些层叠等级？"></a>有哪些层叠等级？</h3><p>在同一个层叠上下文中，会按照下面给出顺序逐层往上堆叠。当元素创建了新的层叠上下文，它会在其层叠作用域中从头再按顺序堆叠后代。</p><p>层叠等级顺序从低到高排列如下:</p><ol><li>background-color</li><li>background-image</li><li>border</li><li>z-index 为负数</li><li>块级普通元素</li><li>float盒子</li><li>inline和inline-block盒子</li><li>等位元素</li><li>不依赖 <code>z-index</code>的创建层叠上下文元素</li><li>z-index &gt;= 0 的元素</li></ol><p>1~3指的是创建当前层叠上下文的元素的背景和边框。这是一个易错点：当比较层叠等级时，往往会把dom树结构上的父元素背景视为一个层叠等级，但是父元素并不是创建当前层叠上下文的元素。</p><p>正确做法是，首先确定创建当前层叠上下文的元素是什么，然后不要受dom结构的影响，按照上面给出顺序排列元素等级。这些元素中有些能够创建新的层叠上下文，这可视为一个断层，新层叠上下文中的元素先跳过，等排列完当前层叠上下文的所有元素，再去排列子层叠上下文的元素。</p><h2 id="🌵最后"><a href="#🌵最后" class="headerlink" title="🌵最后"></a>🌵最后</h2><ul><li>本文的例子中参考了张鑫旭前辈<a href="https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/" target="_blank" rel="noopener">《深入理解CSS中的层叠上下文和层叠顺序》</a>一文，致谢</li><li>这里<a href="https://www.w3.org/TR/css-position-3/#stacking-context" target="_blank" rel="noopener">📖</a> 是层叠上下文的标准文档，致敬</li></ul>]]></content>
    
    <summary type="html">
    
      本文的内容主要分为两部分：一是什么是层叠上下文(stacking context)，以及如何创建层叠上下文；二是什么是层叠等级(stack level)，有哪些层叠等级。
    
    </summary>
    
      <category term="前端" scheme="https://fujiayishally.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS相关" scheme="https://fujiayishally.github.io/categories/%E5%89%8D%E7%AB%AF/CSS%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="CSS" scheme="https://fujiayishally.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>css filter 过滤器</title>
    <link href="https://fujiayishally.github.io/2019/07/17/css-filter/"/>
    <id>https://fujiayishally.github.io/2019/07/17/css-filter/</id>
    <published>2019-07-17T00:08:49.000Z</published>
    <updated>2019-07-19T12:56:08.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="📚-Filter-过滤器"><a href="#📚-Filter-过滤器" class="headerlink" title="📚 Filter 过滤器"></a>📚 Filter 过滤器</h2><p><code>filter</code> 的作用是调整图像、背景和边框的渲染效果，对其进行模糊、颜色偏移等图像处理。它有两种应用方式，一是作为CSS属性，调用预定义函数；二是作为SVG的滤镜元素。本文介绍的是前者。</p><p>下面会先简要列出 <code>filter</code> 的所有预处理函数及其作用和参数，然后整理成一份表格，罗列出不同预处理函数在不同参数下的图像渲染结果。希望这样的纵横对比能加深对<code>filter</code>的理解和记忆。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt; : none | [ &lt;filter-function&gt; | &lt;url&gt; ]+</span><br></pre></td></tr></table></figure><p><code>filter</code> 过滤器可以重复设置；</p><h3 id="预处理函数"><a href="#预处理函数" class="headerlink" title="预处理函数"></a>预处理函数</h3><ul><li>亮度处理：<code>brightness</code><br>设置图像的亮度，取值 <code>0% ~ &gt;100%</code>，值取 <code>0%</code> 图像会全黑，值取 <code>100%</code> 则图像无变化，值 <code>超过100%</code> 图像会比原来更亮,默认是<code>1</code>。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span><span class="selector-pseudo">:brightness(0.4)</span>;</span><br></pre></td></tr></table></figure><ul><li>设置对比度 <code>contrast</code><br>设置图像对比度。取值 <code>0% ~ &gt;100%</code>，值取 <code>0%</code> 图像会全灰，值取 <code>100%</code> 则图像无变化，值 <code>超过100%</code> 图像会运用更低的对比,默认是<code>1</code>。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">contrast</span>(200%);</span><br></pre></td></tr></table></figure><ul><li>饱和度<code>saturate</code><br>设置图像饱和度，取值 <code>0% ~ &gt;100%</code>，值取 <code>0%</code> 图像完全不饱和，值取 <code>100%</code> 则图像无变化，值<code>超过100%</code> 图像有更高的饱和度。默认值<code>1</code>。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter: saturate(30%);</span><br></pre></td></tr></table></figure><ul><li>灰阶处理 <code>grayscale</code><br>设置图像灰度，取值 <code>0%~100%</code>，值取 <code>0%</code> 图像无变化，值取 <code>100%</code> 则为完全灰度图像，默认值<code>0</code>，不支持<code>px</code>。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">grayscale</span>(100%)</span><br></pre></td></tr></table></figure><ul><li>反转 <code>invert</code><br>设置图像反转比例。取值<code>0%~100%</code>，值取 <code>0%</code> 图像无变化，值取 <code>100%</code> 则图像完全反转，默认值 <code>0</code>。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">invert</span>(75%);</span><br></pre></td></tr></table></figure><ul><li>透明 <code>opacity</code><br>设置图像透明度，取值<code>0%~100%</code>，值取 <code>0%</code> 图像全透明，值取 <code>100%</code> 则图像无变化。默认值<code>1</code>。这个预定义函数与<code>opacity</code>属性的不同之处在于，一些浏览器为了提升性能会对<code>filter</code>提供硬件加速。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">opacity</span>(25%);</span><br></pre></td></tr></table></figure><ul><li><code>sepia</code><br>设置图像转为深褐色的转换比例，取值<code>0%~100%</code>，值取 <code>0%</code> 图像无变化，值取 <code>100%</code> 则图像完全深褐色，默认值 <code>0</code>。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">sepia</span>(60%);</span><br></pre></td></tr></table></figure><ul><li>色相旋转 <code>hue-rotate</code><br>给图像应用色相旋转。单位 <code>deg</code> ，默认值 <code>0deg</code> , <code>0deg ~ 360deg</code> 为一周期。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">hue-rotate</span>(90<span class="selector-tag">deg</span>);</span><br></pre></td></tr></table></figure><ul><li>模糊处理 <code>blur</code><br>设置图像的模糊度。取值即高斯模糊函数的标准差，简单理解就是设置了多大的值，就表示多少的像素会融在一起。所以值越大越模糊。单位为<code>px</code>，不支持<code>%</code>。默认值为<code>0</code>。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">blur</span>(5<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><ul><li>阴影<code>drop-shadow</code><br>设置图像阴影，除了没有 <code>inset</code> 关键字，其他设置与 <code>box-shadow</code> 很相似。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">drop-shadow</span>(16<span class="selector-tag">px</span> 16<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">black</span>)</span><br></pre></td></tr></table></figure><h2 id="👀-效果对比"><a href="#👀-效果对比" class="headerlink" title="👀 效果对比  "></a>👀 效果对比  </h2><style>    .img{        width:100%;        height:3em;        display:inline-block;        background:url(https://fujiayishally.github.io/images/header.jpg) 0 / cover;        border: solid 1px black;    }    .brightness1{filter:brightness(0%);}    .brightness2{filter:brightness(50%);}    .brightness3{filter:brightness(100%);}    .brightness4{filter:brightness(150%);}    .brightness5{filter:brightness(1000%);}    .contrast1{filter:contrast(0%);}    .contrast2{filter:contrast(50%);}    .contrast3{filter:contrast(100%);}    .contrast4{filter:contrast(150%);}    .contrast5{filter:contrast(1000%);}    .saturate1{filter:saturate(0%);}    .saturate2{filter:saturate(50%);}    .saturate3{filter:saturate(100%);}    .saturate4{filter:saturate(150%);}    .saturate5{filter:saturate(1000%);}    .grayscale1{filter:grayscale(0%);}    .grayscale2{filter:grayscale(25%);}    .grayscale3{filter:grayscale(50%);}    .grayscale4{filter:grayscale(75%);}    .grayscale5{filter:grayscale(100%);}    .invert1{filter:invert(0%);}    .invert2{filter:invert(25%);}    .invert3{filter:invert(50%);}    .invert4{filter:invert(75%);}    .invert5{filter:invert(100%);}    .opacity1{filter:opacity(0%);}    .opacity2{filter:opacity(25%);}    .opacity3{filter:opacity(50%);}    .opacity4{filter:opacity(75%);}    .opacity5{filter:opacity(100%);}    .sepia1{filter:sepia(0%);}    .sepia2{filter:sepia(25%);}    .sepia3{filter:sepia(50%);}    .sepia4{filter:sepia(75%);}    .sepia5{filter:sepia(100%);}    .hue-rotate1{filter:hue-rotate(0deg);}    .hue-rotate2{filter:hue-rotate(90deg);}    .hue-rotate3{filter:hue-rotate(180deg);}    .hue-rotate4{filter:hue-rotate(270deg);}    .hue-rotate5{filter:hue-rotate(360deg);}    .blur1{filter:blur(0px);}    .blur2{filter:blur(1px);}    .blur3{filter:blur(5px);}    .blur4{filter:blur(20px);}    .blur5{filter:blur(100px);}    .drop-shadow1{filter: drop-shadow(0px 0px 0px black);}     .drop-shadow2{filter: drop-shadow(0px 0px 10px black);}    .drop-shadow3{filter: drop-shadow(10px 0px 10px black);}    .drop-shadow4{filter: drop-shadow(0px 10px 10px black);}    .drop-shadow5{filter: drop-shadow(10px 10px 10px black);}</style><table width="100%">    <tr><td rowspan="2">brightness</td><td>0%</td><td>50%</td><td>100%</td><td>150%</td><td>1000%</td></tr>    <tr>        <td><div class="img brightness1"></div></td>        <td><div class="img brightness2"></div></td>        <td><div class="img brightness3"></div></td>        <td><div class="img brightness4"></div></td>        <td><div class="img brightness5"></div></td>    </tr>    <tr><td rowspan="2">contrast</td><td>0%</td><td>50%</td><td>100%</td><td>150%</td><td>1000%</td></tr>    <tr>        <td><div class="img contrast1"></div></td>        <td><div class="img contrast2"></div></td>        <td><div class="img contrast3"></div></td>        <td><div class="img contrast4"></div></td>        <td><div class="img contrast5"></div></td>    </tr>    <tr><td rowspan="2">saturate</td><td>0%</td><td>50%</td><td>100%</td><td>150%</td><td>1000%</td></tr>    <tr>        <td><div class="img saturate1"></div></td>        <td><div class="img saturate2"></div></td>        <td><div class="img saturate3"></div></td>        <td><div class="img saturate4"></div></td>        <td><div class="img saturate5"></div></td>    </tr>    <tr><td rowspan="2">grayscale</td><td>0%</td><td>25%</td><td>50%</td><td>75%</td><td>100%</td></tr>    <tr>        <td><div class="img grayscale1"></div></td>        <td><div class="img grayscale2"></div></td>        <td><div class="img grayscale3"></div></td>        <td><div class="img grayscale4"></div></td>        <td><div class="img grayscale5"></div></td>    </tr>     <tr><td rowspan="2">invert</td><td>0%</td><td>25%</td><td>50%</td><td>75%</td><td>100%</td></tr>    <tr>        <td><div class="img invert1"></div></td>        <td><div class="img invert2"></div></td>        <td><div class="img invert3"></div></td>        <td><div class="img invert4"></div></td>        <td><div class="img invert5"></div></td>    </tr>    <tr><td rowspan="2">opacity</td><td>0%</td><td>25%</td><td>50%</td><td>75%</td><td>100%</td></tr>    <tr>        <td><div class="img opacity1"></div></td>        <td><div class="img opacity2"></div></td>        <td><div class="img opacity3"></div></td>        <td><div class="img opacity4"></div></td>        <td><div class="img opacity5"></div></td>    </tr>    <tr><td rowspan="2">sepia</td><td>0%</td><td>25%</td><td>50%</td><td>75%</td><td>100%</td></tr>    <tr>        <td><div class="img sepia1"></div></td>        <td><div class="img sepia2"></div></td>        <td><div class="img sepia3"></div></td>        <td><div class="img sepia4"></div></td>        <td><div class="img sepia5"></div></td>    </tr>    <tr><td rowspan="2">hue-rotate</td><td>0deg</td><td>90deg</td><td>180deg</td><td>270deg</td><td>360deg</td></tr>    <tr>        <td><div class="img hue-rotate1"></div></td>        <td><div class="img hue-rotate2"></div></td>        <td><div class="img hue-rotate3"></div></td>        <td><div class="img hue-rotate4"></div></td>        <td><div class="img hue-rotate5"></div></td>    </tr>    <tr><td rowspan="2">blur</td><td>0px</td><td>1px</td><td>5px</td><td>20px</td><td>100px</td></tr>    <tr>        <td><div class="img blur1"></div></td>        <td><div class="img blur2"></div></td>        <td><div class="img blur3"></div></td>        <td><div class="img blur4"></div></td>        <td><div class="img blur5"></div></td>    </tr>    <tr><td rowspan="2">drop-shadow</td><td>0px 0px 0px black</td><td>0px 0px 10px black</td><td>10px 0px 10px black</td><td>0px 10px 10px</td><td>10px 10px 10px black</td></tr>    <tr>        <td><div class="img drop-shadow1"></div></td>        <td><div class="img drop-shadow2"></div></td>        <td><div class="img drop-shadow3"></div></td>        <td><div class="img drop-shadow4"></div></td>        <td><div class="img drop-shadow5"></div></td>    </tr></table><h2 id="🚧-注意"><a href="#🚧-注意" class="headerlink" title="🚧 注意"></a>🚧 注意</h2><ol><li>预处理函数是作用于整个元素的，即使边框也会受到影响</li><li>某些函数处理后，元素的渲染范围已经超出了元素本身，例如 <code>blur</code> 函数。</li></ol><h2 id="🌵最后"><a href="#🌵最后" class="headerlink" title="🌵最后"></a>🌵最后</h2><ul><li>点<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter" target="_blank" rel="noopener">📖</a> 查看MDN相关文档，或者点<a href="https://www.w3.org/TR/filter-effects/#FilterCSSImageValue" target="_blank" rel="noopener">📖</a> 查看标准文档，致敬</li></ul>]]></content>
    
    <summary type="html">
    
      本文主要对filter过滤器属性进行了简单的梳理，并把所有预处理函数在不同参数下的渲染效果，放到了同一张表格中以供对比。
    
    </summary>
    
      <category term="前端" scheme="https://fujiayishally.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS属性" scheme="https://fujiayishally.github.io/categories/%E5%89%8D%E7%AB%AF/CSS%E5%B1%9E%E6%80%A7/"/>
    
    
      <category term="CSS" scheme="https://fujiayishally.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS clip-path 剪切属性</title>
    <link href="https://fujiayishally.github.io/2019/07/16/CSS-clip-path/"/>
    <id>https://fujiayishally.github.io/2019/07/16/CSS-clip-path/</id>
    <published>2019-07-16T13:42:36.000Z</published>
    <updated>2019-07-19T12:56:56.956Z</updated>
    
    <content type="html"><![CDATA[<h2 id="📚-CSS-clip-path-剪切"><a href="#📚-CSS-clip-path-剪切" class="headerlink" title="📚 CSS clip-path 剪切"></a>📚 CSS clip-path 剪切</h2><p><code>clip-path</code> 属性（替代已经弃用的<code>clip</code>属性）用于裁剪元素，支持逗号赋值。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clip-path:&lt;clip-source&gt; | [ &lt;basic-shape&gt; || &lt;geometry-box&gt; ] | none</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">clip-source</span>&gt;<span class="selector-pseudo">:url(resources.svg</span><span class="selector-id">#c1</span>);</span><br><span class="line">&lt;geometry-box&gt;:clip-path: margin-box | border-box | padding-box | content-box | fill-box | stroke-box | view-box;</span><br><span class="line">&lt;basic-shape&gt;:clip-path: inset() | circle()| ellipse() | polyon() | &lt;shape-box&gt;</span><br></pre></td></tr></table></figure><h3 id="预定义函数"><a href="#预定义函数" class="headerlink" title="预定义函数"></a>预定义函数</h3><p>在左上角为（0%，0%），右下角为（100%，100%）的坐标轴中，调用预定义的函数设置裁剪边框：</p><ul><li><p><code>inset( 上右下左的边距 round 上右下左圆角 )</code>裁剪內置矩形</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">clip-path</span><span class="selector-pseudo">:inset(10px</span> 20<span class="selector-tag">px</span> 30<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">round</span> 20<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> 50<span class="selector-tag">px</span> 0);</span><br></pre></td></tr></table></figure><p>  <img src="2019-07-16-CSS-clip-path/inset.JPG" alt="內置矩形裁剪分析图"></p></li><li><p><code>circle(半径 at 圆心坐标)</code> 裁剪圆形</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">clip-path</span><span class="selector-pseudo">:circle(50</span>% <span class="selector-tag">at</span> 50% 50%);</span><br></pre></td></tr></table></figure></li></ul><pre><code>![圆形裁剪分析图](2019-07-16-CSS-clip-path/circle.JPG)</code></pre><ul><li><p><code>ellipse(长短轴半径 at 圆心坐标)</code> 裁剪椭圆形 </p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">clip-path</span><span class="selector-pseudo">:ellipse(25</span>% 50% <span class="selector-tag">at</span> 50% 50%);</span><br></pre></td></tr></table></figure><p>  <img src="2019-07-16-CSS-clip-path/ellipse.JPG" alt="椭圆裁剪分析图"></p></li><li><p><code>polyon(顶点坐标)</code> 裁剪多边形<br>定义多边形各个顶点坐标，直线勾连顶点圈出裁剪区域。需要过渡效果时必须注意，例如裁剪三角形：</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">clip-path</span><span class="selector-pseudo">:polygon(0</span>% 100%, 50%  0%,100% 100%);</span><br></pre></td></tr></table></figure><p>  <img src="2019-07-16-CSS-clip-path/polygon.JPG" alt="三角形裁剪分析图"></p><p>  另外如果需要过渡效果就必须注意：<strong><code>polygon</code>点坐标的数目在动画的前后数目要一样</strong>。</p></li></ul><h2 id="👀-效果对比"><a href="#👀-效果对比" class="headerlink" title="👀 效果对比"></a>👀 效果对比</h2><h3 id="多边形裁剪polygon"><a href="#多边形裁剪polygon" class="headerlink" title="多边形裁剪polygon"></a>多边形裁剪<code>polygon</code></h3><style>    .source{        background:url(https://fujiayishally.github.io/images/header.jpg) center/cover;        width:100px;height:100px;    }    .polygon1{clip-path: polygon(0% 100%, 50%  0%,100% 100%);}    .polygon2{clip-path: polygon(polygon(0% 0%, 0% 100%,100% 100%,100% 0%));}    .polygon3{clip-path: polygon(0% 38.31%, 50% 0%,100% 38.31%,80.86% 100%,19.14% 100%);}    .polygon4{clip-path: polygon(25% 0%, 75% 0%,100% 50%,75% 100%,25% 100%,0% 50%);}    .polygon5{clip-path: polygon(50% 0%, 90.18% 19.72%,100% 64.22%,72.32% 100%,27.68% 100%,0% 64.22%,10.09% 19.72%);}    .polygon6{clip-path: polygon(29.34% 0%, 70.66% 0%,100% 29.34%,100% 70.66%,70.66% 100%,29.34% 100%,0% 70.66%,0% 29.34%);}</style><div class="t"></div><table><thead><tr><th align="center">多边形</th><th align="center">效果图</th><th align="center">代码</th></tr></thead><tbody><tr><td align="center">三角形</td><td align="center"><div class="source polygon1"></div></td><td align="center">polygon(0% 100%, 50%  0%,100% 100%)</td></tr><tr><td align="center">正方形</td><td align="center"><div class="source polygon2"></div></td><td align="center">polygon(0% 0%, 0% 100%,100% 100%,100% 0%)</td></tr><tr><td align="center">正五边形</td><td align="center"><div class="source polygon3"></div></td><td align="center">polygon(0% 38.31%, 50% 0%,100% 38.31%,80.86% 100%,19.14% 100%)</td></tr><tr><td align="center">正六边形</td><td align="center"><div class="source polygon4"></div></td><td align="center">polygon(25% 0%, 75% 0%,100% 50%,75% 100%,25% 100%,0% 50%)</td></tr><tr><td align="center">正七边形</td><td align="center"><div class="source polygon5"></div></td><td align="center">polygon(50% 0%, 90.18% 19.72%,100% 64.22%,72.32% 100%,27.68% 100%,0% 64.22%,10.09% 19.72%)</td></tr><tr><td align="center">正八边形</td><td align="center"><div class="source polygon6"></div></td><td align="center">polygon(29.34% 0%, 70.66% 0%,100% 29.34%,100% 70.66%,70.66% 100%,29.34% 100%,0% 70.66%,0% 29.34%)</td></tr></tbody></table><h3 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h3><h4 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h4><img src="https://fujiayishally.github.io/images/header.jpg" class="demo1"><style>.demo1 {    transition: 0.4s cubic-bezier(1, -1, 0, 2);    clip-path: circle(50px at 60px 60px);    width:120px;height:120px;}.demo1:hover {    clip-path: circle(55px at 60px 60px);}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo1</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.4s</span> <span class="built_in">cubic-bezier</span>(1, -1, 0, 2);</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">circle</span>(50px at 60px 60px);</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">120px</span>;<span class="attribute">height</span>:<span class="number">120px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo1</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">circle</span>(55px at 60px 60px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h4><style>.demo2 {    transition:0.5s;    clip-path: polygon(0% 50%, 10% 40%, 10% 48%, 90% 48%, 90% 40%, 100% 50%, 90% 60%, 90% 52%, 10% 52%, 10% 60%);    width:100px;    height:100px;    background:black;    position:relative;}.demo2:before{    content: '';    position: absolute;    top:40%;    left:15%;    width: 5px;    height: 5px;    border-radius: 3px;    background-color: #fff;}.demo2:hover {    clip-path:polygon(0% 53%, 0% 47%, 20% 30%, 60% 30%, 90% 50%, 100% 65%, 100% 35%, 90% 52%, 60% 70%, 20% 70%);}</style><div class="demo2"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo2</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>:<span class="number">0.5s</span>;</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(0% 50%, 10% 40%, 10% 48%, 90% 48%, 90% 40%, 100% 50%, 90% 60%, 90% 52%, 10% 52%, 10% 60%);</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>:black;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo2</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">40%</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">15%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo2</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">clip-path</span>:<span class="built_in">polygon</span>(0% 53%, 0% 47%, 20% 30%, 60% 30%, 90% 50%, 100% 65%, 100% 35%, 90% 52%, 60% 70%, 20% 70%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🌵最后"><a href="#🌵最后" class="headerlink" title="🌵最后"></a>🌵最后</h2><ul><li>这是一个<a href="https://bennettfeely.com/clippy/" target="_blank" rel="noopener">clip-path在线制作工具</a></li><li>点<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/clip-path" target="_blank" rel="noopener">📖</a> 查看MDN上的介绍，致敬</li><li>多边形例子及裁剪分析图参考了<a href="https://cloud.tencent.com/developer/article/1355005" target="_blank" rel="noopener">这篇文章</a>,致谢</li><li>一个超级棒的<a href="http://species-in-pieces.com/#" target="_blank" rel="noopener">动物变换例子页面</a>👍</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;📚-CSS-clip-path-剪切&quot;&gt;&lt;a href=&quot;#📚-CSS-clip-path-剪切&quot; class=&quot;headerlink&quot; title=&quot;📚 CSS clip-path 剪切&quot;&gt;&lt;/a&gt;📚 CSS clip-path 剪切&lt;/h2&gt;&lt;p&gt;&lt;c
      
    
    </summary>
    
      <category term="前端" scheme="https://fujiayishally.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS属性" scheme="https://fujiayishally.github.io/categories/%E5%89%8D%E7%AB%AF/CSS%E5%B1%9E%E6%80%A7/"/>
    
    
      <category term="CSS" scheme="https://fujiayishally.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>frosted glass 毛玻璃效果</title>
    <link href="https://fujiayishally.github.io/2019/07/16/frosted-glass/"/>
    <id>https://fujiayishally.github.io/2019/07/16/frosted-glass/</id>
    <published>2019-07-16T13:36:57.000Z</published>
    <updated>2019-07-19T12:56:41.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🤔问题"><a href="#🤔问题" class="headerlink" title="🤔问题"></a>🤔问题</h2><p>当背景图太过花哨，使得内容层的文字难以阅读时，应该怎么办呢？</p><p><img src="3-1.JPG" alt="不做处理，文字看不清"></p><p>我的想法是常规地添加个透明背景：</p><table><thead><tr><th align="center">黑底白字</th><th align="center">白底黑子</th></tr></thead><tbody><tr><td align="center"><img src="3-2.JPG" alt="给文字添加透明度为0.3的白色背景色"></td><td align="center"><img src="3-3.JPG" alt="给文字添加透明度为0.8的白色背景色"></td></tr></tbody></table><p>说实话，加了背景色之后虽然能看清文字了，可大大一块颜色不怎么好看呀。有什么办法能让文字和背景图更好地融合呢？<strong>毛玻璃</strong>可能是个不错的选择。</p><p>什么是毛玻璃效果？看看QQ音乐歌词的界面就知道了。歌词能很清楚地被看到，因为文本覆盖的图片区域被大大地模糊了，人在阅读时就会更专注于清晰可辨的文字。</p><p><img src="3-4.JPG" alt="QQ音乐歌词界面截图"></p><h2 id="💡思路"><a href="#💡思路" class="headerlink" title="💡思路"></a>💡思路</h2><p>模糊效果可以用 <code>filter</code>过滤器的 <code>blur</code> 方法来实现。如果你脑海中还不能马上浮现 <code>filter</code> 的知识图谱，不妨阅读一下<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter" target="_blank" rel="noopener">MDN文档</a>或者我整理的这篇<a href="/2019/07/16/css-filter/">CSS Filter</a> 。</p><p>如果直接对元素使用<code>blur</code>，文字也会变得模糊:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter:blur(2px);</span><br></pre></td></tr></table></figure><p><img src="3-5.JPG" alt="添加blur后模糊了的文字"></p><p>怎么才能让元素覆盖区域背景模糊，而又不影响文字的现实呢？可以在背景图元素和内容元素之间加一个中间层。它需要满足几个要求：</p><ul><li>中间层渲染的图像能与背景元素图像无缝衔接</li><li>中间层与内容元素盒子等大</li><li>由中间层实现模糊效果，内容元素叠加其上</li></ul><p>中间层应该是内容层的子元素盒子，能直接获取父元素大小。又因为是纯样式效果，比起增加一个<code>div</code>子元素，使用<code>伪元素</code>更利于维护DOM结构。</p><h2 id="🎉解决方案"><a href="#🎉解决方案" class="headerlink" title="🎉解决方案"></a>🎉解决方案</h2><p>解决问题的关键时如何让伪元素与背景元素拥有无缝衔接的背景图。</p><p><code>background-attachment:fixed</code> 的作用是让背景图相对视窗固定。当背景元素和伪元素都设置相同背景属性，并且背景相对视窗固定时，就达到视觉上的无缝衔接效果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">background:url(https://cdn.pixabay.com/photo/2016/02/19/10/51/stairs-1209439__340.jpg) no-repeat;</span><br><span class="line"><span class="selector-tag">background-size</span><span class="selector-pseudo">:50</span>% <span class="selector-tag">auto</span>;</span><br><span class="line"><span class="selector-tag">background-position</span><span class="selector-pseudo">:50</span>% 0%;</span><br><span class="line"><span class="selector-tag">background-attachment</span><span class="selector-pseudo">:fixed</span>;</span><br><span class="line"><span class="selector-tag">border</span><span class="selector-pseudo">:solid</span> 1<span class="selector-tag">px</span> <span class="selector-tag">black</span>;</span><br></pre></td></tr></table></figure><p>伪元素继承父元素的大小(背景色是为了方便调试)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">right</span>:<span class="number">0</span>;<span class="attribute">bottom</span>:<span class="number">0</span>;<span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">filter</span>:<span class="built_in">blur</span>(20px);</span><br><span class="line">  <span class="attribute">background</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果是这样的：</p><p><img src="3-6.JPG" alt="添加伪元素"></p><p>伪元素挡住了内容元素！这是理所当然的，因为伪元素某种意义上来说，相当于内容元素的子元素,且它绝对定位覆盖了父元素。所以需要手动调整伪元素的层叠顺序：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="selector-tag">index</span><span class="selector-pseudo">:-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是没能解决问题：</p><p><img src="3-1.JPG" alt="调整伪元素层叠顺序为-1"></p><p>伪元素的层叠顺序不仅排在了内容元素后面，也排在了背景元素后面，为什么呢？</p><p>因为背景元素、内容元素、和伪元素都处于同一层叠上下文中，<code>z-index</code>为负值时，它的层叠顺序会在普通元素盒子之后。解决办法是让内容元素拥有层叠上下文，这样伪元素的层叠顺序就与外界无关了。</p><p>创建层叠上下文的方式之一，是设置<code>z-index</code>为非 <code>auto</code>值：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="selector-tag">z-index</span><span class="selector-pseudo">:0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有进展了！伪元素渲染在背景元素之前。接下来的问题：一是伪元素的模糊效果出圈了。二是边缘处模糊效果减弱，透出了背景图：</p><p><img src="3-7.JPG" alt="设置父子层叠上下文"></p><p>前者简单，一句 <code>overflow:hidden</code> 就能解决。后者是因为模糊效果的削减幅度是模糊半径的长度，只要伪元素再向外扩展至少<code>20px</code>即可：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    margin:-50px;//保险起见，设置一个比20px更大的值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去掉蓝色背景，最终的渲染效果：</p><p><img src="3-8.JPG" alt="设置父子层叠上下文"></p><h2 id="🚧注意"><a href="#🚧注意" class="headerlink" title="🚧注意"></a>🚧注意</h2><p>上述解决方案有个明显的确定，因为<code>background-attachment:fixed</code> 是相对视窗固定，当出现滚动条时，背景会随着视窗固定，而内容会随着滚动条滚动：</p><p><img src="scroll.gif" alt="背景和内容滚动不一致"></p><p>要想内容和背景滚动一致，就需要计算调整伪元素背景的大小和位置，使得其显示部分能够尽量和被背景元素的图像衔接上：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.background</span>&#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(https://cdn.pixabay.com/photo/2016/02/19/10/51/stairs-1209439__340.jpg);</span><br><span class="line">  <span class="attribute">background-size</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-position</span>:<span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">50%</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">2em</span> auto;</span><br><span class="line">  <span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content2</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">  <span class="attribute">background-size</span>:<span class="number">125%</span>;</span><br><span class="line">  <span class="attribute">background-position</span>:<span class="number">50%</span> -<span class="number">2em</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个元素联系紧密，不管是初始配置还是后续修改，都需要三者兼顾来实现效果。可维护性不太友好，但是背景和内容滚动同步。</p><h2 id="🌵最后"><a href="#🌵最后" class="headerlink" title="🌵最后"></a>🌵最后</h2><ul><li>这是 <a href="https://codepen.io/fujiayishally/pen/WqVWzd" target="_blank" rel="noopener">本例代码</a>，以供参考</li><li>本问题摘自《CSS揭秘》–Lea Verou的第十八章，致谢</li><li>点<a href="https://www.w3.org/TR/filter-effects/#FilterCSSImageValue" target="_blank" rel="noopener">📖</a> 查看更多过滤器标准内容</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;🤔问题&quot;&gt;&lt;a href=&quot;#🤔问题&quot; class=&quot;headerlink&quot; title=&quot;🤔问题&quot;&gt;&lt;/a&gt;🤔问题&lt;/h2&gt;&lt;p&gt;当背景图太过花哨，使得内容层的文字难以阅读时，应该怎么办呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;3-1.JPG&quot; alt=&quot;
      
    
    </summary>
    
      <category term="前端" scheme="https://fujiayishally.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS样式" scheme="https://fujiayishally.github.io/categories/%E5%89%8D%E7%AB%AF/CSS%E6%A0%B7%E5%BC%8F/"/>
    
    
      <category term="CSS" scheme="https://fujiayishally.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>multiple borders 多重边框</title>
    <link href="https://fujiayishally.github.io/2019/07/16/multiple-borders/"/>
    <id>https://fujiayishally.github.io/2019/07/16/multiple-borders/</id>
    <published>2019-07-16T03:49:59.000Z</published>
    <updated>2019-07-19T12:56:34.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🤔问题"><a href="#🤔问题" class="headerlink" title="🤔问题"></a>🤔问题</h2><p>怎么让一个元素现实出多个边框的效果呢？心里面的第一反应是多个元素嵌套层叠，给出视觉效果上的“多边框”。但这并不是真正的多边框不是吗？</p><h2 id="💡思路"><a href="#💡思路" class="headerlink" title="💡思路"></a>💡思路</h2><p>既然是边框的问题，就让“边框”来解决。<code>border</code>边框属性不支持逗号分隔的多个值，所以只能实现一层。之外还能对元素边界产生视觉的效果的元素还有 <a href="https://www.w3.org/TR/css-ui-3/#outline-props" target="_blank" rel="noopener">盒子模型的<code>outline</code></a> 以及 用作<a href="https://www.w3.org/TR/css-backgrounds-3/#the-box-shadow" target="_blank" rel="noopener">边框效果的<code>box-shadow</code></a>。</p><h3 id="outline"><a href="#outline" class="headerlink" title="outline"></a><code>outline</code></h3><p><code>outline</code>通常通常用于突出某个可视对象，标准语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;outline&gt;:[ &lt;outline-color&gt; || &lt;outline-style&gt; || &lt;outline-width&gt; ]</span><br></pre></td></tr></table></figure><p>其实 <code>outline</code> 和 <code>border</code> 的属性设置是很相似的，它也可以选择样式，同样不支持逗号分割多值。此外，<code>outline</code> 还受偏移属性 <code>outline-offset</code> 控制。那么如果需要更多层的边框怎么办呢？你可以考虑一下<code>box-shadow</code>。</p><h3 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a><code>box-shadow</code></h3><p><code>box-shadow</code>可以产生一个或多个下拉阴影框，标准语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;shadow&gt; = inset？ &amp;&amp;  &lt;length&gt; &#123;2,4&#125;  &amp;&amp;  &lt;color&gt; ？</span><br></pre></td></tr></table></figure><p>第二部分的 <code>&lt;length&gt;</code> 值的个数是{2,4}，表示在[水平偏移，垂直偏移，模糊半径，传播距离]中从左到右选择两到四个赋值。<strong>传播距离</strong>是往往被忽略的一个值。现在设想如果一个阴影不偏移，不模糊，有一个传播距离，那么呈现出来的效果不就是一个边框吗？而且这个“边框”是可以多个的。</p><p>当然 <code>box-shadow</code> 并非完美无缺的，它只能用来模拟实线边框，如果需要虚线效果，它是没辙的。</p><p>下面我们来具体看看两个属性实现多重边框的效果吧。</p><h2 id="🎉解决方案"><a href="#🎉解决方案" class="headerlink" title="🎉解决方案"></a>🎉解决方案</h2><p>为了便于比较，每个盒子都设置了一样的通用样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">width:200px;</span><br><span class="line">height:100px;</span><br><span class="line">box-sizing:border-box;</span><br><span class="line">text-align:center;</span><br><span class="line">background-color:rgba(253,234,171,0.5);</span><br></pre></td></tr></table></figure><h3 id="outline方案"><a href="#outline方案" class="headerlink" title="outline方案"></a><code>outline</code>方案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">border:10px dashed rgba(0,0,255,0.3);</span><br><span class="line">outline:10px solid rgba(0,255,0,0.3);</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="outline.JPG" alt="outline"></p><h3 id="box-shadow方案"><a href="#box-shadow方案" class="headerlink" title="box-shadow方案"></a><code>box-shadow</code>方案</h3><h4 id="外阴影"><a href="#外阴影" class="headerlink" title="外阴影"></a>外阴影</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">border:10px dashed rgba(0,0,255,0.3);</span><br><span class="line">box-shadow: 0 0 0 10px rgba(0,255,0,0.3),</span><br><span class="line">            0 0 0 20px rgba(255,0,0,0.3);</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="box-shadow.JPG" alt="box-shadow"></p><h4 id="内阴影"><a href="#内阴影" class="headerlink" title="内阴影"></a>内阴影</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">border:10px dashed rgba(0,0,255,0.3);</span><br><span class="line">box-shadow: 0 0 0 10px rgba(0,255,0,0.3) inset,</span><br><span class="line">            0 0 0 20px rgba(255,0,0,0.3) inset;</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="box-shadow-inset.JPG" alt="box-shadow-inset"></p><h2 id="🚧注意"><a href="#🚧注意" class="headerlink" title="🚧注意"></a>🚧注意</h2><p>看起来还不错是不是？不过有些地方还是需要注意的。</p><h3 id="圆角问题"><a href="#圆角问题" class="headerlink" title="圆角问题"></a>圆角问题</h3><p><code>outline</code> 不一定会贴合 <code>border-radius</code> 属性产生的圆角，这个被CSS工作组认为是一个bug，未来可能会修复。但目前而言，需要根据实际情况谨慎测试使用。<code>box-shadow</code> 就不会有这个问题。看看加上圆角后的不同效果：</p><table><thead><tr><th align="center"><code>outline</code></th><th align="center">外阴影</th><th align="center">内阴影</th></tr></thead><tbody><tr><td align="center"><img src="outline-radius.JPG" alt="outline"></td><td align="center"><img src="box-shadow-radius.JPG" alt="box-shadow"></td><td align="center"><img src="box-shadow-inset-radius.JPG" alt="box-shadow-inset"></td></tr></tbody></table><h3 id="布局影响"><a href="#布局影响" class="headerlink" title="布局影响"></a>布局影响</h3><h4 id="outline-1"><a href="#outline-1" class="headerlink" title="outline"></a><code>outline</code></h4><p><a href="https://www.w3.org/TR/css-ui-3/#outline-props" target="_blank" rel="noopener">标准文档</a>中给出了<code>outline</code> 和 <code>border</code> 的区别，其中一点就是</p><blockquote><p>Outlines do not take up space.(<code>outline</code>不占空间)</p></blockquote><p>对此进一步的解析是：</p><blockquote><p>the outline is always on top, and doesn’t influence the position or size of the box, or of any other boxes. Therefore, displaying or suppressing outlines does not cause reflow.（<code>outline</code> 一直渲染在元素顶层，不影响自身盒子的位置、大小，也不影响其他盒子。所以，它的显示与否并不会引起回流）</p></blockquote><h4 id="box-shadow-1"><a href="#box-shadow-1" class="headerlink" title="box-shadow"></a><code>box-shadow</code></h4><p><a href="https://www.w3.org/TR/css-backgrounds/#the-box-shadow" target="_blank" rel="noopener">标准文档</a>中也给出了相关细节：</p><blockquote><p>Shadows do not influence layout and may overlap other boxes or their shadows. （阴影不会影响布局，它可以与其他框或阴影重叠）</p></blockquote><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p>为了看出两者在布局上不同，我给圆角中的例子外层又套了一层等大小的父容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">width:200px;</span><br><span class="line">height:100px;</span><br><span class="line">border:1px dashed black;</span><br><span class="line">margin:50px;</span><br></pre></td></tr></table></figure><p>看看效果：</p><table><thead><tr><th align="center"><code>outline</code></th><th align="center">外阴影</th><th align="center">内阴影</th></tr></thead><tbody><tr><td align="center"><img src="outline-radius2.JPG" alt="outline2"></td><td align="center"><img src="box-shadow-radius2.JPG" alt="box-shadow2"></td><td align="center"><img src="box-shadow-inset-radius2.JPG" alt="box-shadow-inset2"></td></tr></tbody></table><h3 id="box-shadow的渲染"><a href="#box-shadow的渲染" class="headerlink" title="box-shadow的渲染"></a><code>box-shadow</code>的渲染</h3><p>既然阴影可以有多层，那么阴影顺序是怎样的呢？</p><blockquote><p>The shadow effects are applied front-to-back: the first shadow is on top and the others are layered behind. （阴影之间第一个位于<strong>顶部</strong>，其他在它<strong>后面</strong>）</p><p>…the outer box-shadows of an element are drawn immediately below the background of that element…(外阴影绘制在元素背景下方)</p><p>… the inner shadows of an element are drawn immediately above the background of that element.(内阴影绘制在元素背景上方)</p></blockquote><p>也就是说，阴影是层层叠加的，传播距离的长度需要递增，否则会被挡住。外阴影和内阴影不是连续的，中间隔着背景和边框。</p><p>还有一点要注意的是，外阴影不会触发鼠标点击或悬停，也不会触发滚动或增加可滚动区域的大小。弥补办法是：</p><ol><li>通过 margin（外阴影）和padding（内阴影）模拟边框所占空间进行弥补，</li><li>如果对鼠标悬停有要求，应该选择内阴影而不是外阴影</li></ol><h2 id="🌵最后"><a href="#🌵最后" class="headerlink" title="🌵最后"></a>🌵最后</h2><ul><li>这是 <a href="https://codepen.io/fujiayishally/pen/agexEr" target="_blank" rel="noopener">本例代码</a>以供参考</li><li>本问题摘自《CSS揭秘》–Lea Verou的第二章，致谢</li><li>点<a href="https://www.w3.org/TR/css-backgrounds/" target="_blank" rel="noopener">📖</a> 查看更多CSS3背景标准，点<a href="https://www.w3.org/TR/css3-ui" target="_blank" rel="noopener">📖</a> 查看更多用户界面模块标准，致敬</li></ul>]]></content>
    
    <summary type="html">
    
      怎么让一个元素现实出多个边框的效果呢？
    
    </summary>
    
      <category term="前端" scheme="https://fujiayishally.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS样式" scheme="https://fujiayishally.github.io/categories/%E5%89%8D%E7%AB%AF/CSS%E6%A0%B7%E5%BC%8F/"/>
    
    
      <category term="CSS" scheme="https://fujiayishally.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>translucent borders 透明的边框</title>
    <link href="https://fujiayishally.github.io/2019/07/16/translucent-borders/"/>
    <id>https://fujiayishally.github.io/2019/07/16/translucent-borders/</id>
    <published>2019-07-16T02:48:39.000Z</published>
    <updated>2019-07-19T12:56:18.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🤔问题"><a href="#🤔问题" class="headerlink" title="🤔问题"></a>🤔问题</h2><p>假设想给一个容器设置一个白色背景和一道半透明白色边框，body背景从半透明边框透出来，该如何实现呢？</p><h2 id="💡思路"><a href="#💡思路" class="headerlink" title="💡思路"></a>💡思路</h2><p>大部分人首先想到的代码可能是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">border:2em solid rgba(255,255,255,0.5);</span><br><span class="line">background:white;</span><br></pre></td></tr></table></figure><p>但渲染出来的结果却不如意：</p><p><img src="BackgroundClip-BorderBox.jpg" alt="BackgroundClip-BorderBox"></p><p>边框去哪了？再看看去掉白色背景后的渲染结果：</p><p><img src="NoBackgroundColor.jpg" alt="NoBackgroundColor"></p><p>原来是背景色垫在边框下面，半透明的边框看不出来了。也就是说，<strong>元素的背景色有效范围是边框外边沿</strong>。</p><p>那么背景图的有效范围呢？把代码修改一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">border:2em solid rgba(255,255,255,0.5);</span><br><span class="line">background-image: linear-gradient(white 100%,transparent);</span><br></pre></td></tr></table></figure><p>渲染结果和白色背景色时一样：</p><p><img src="BackgroundClip-BorderBox.jpg" alt="BackgroundClip-BorderBox"></p><h2 id="🎉解决方案"><a href="#🎉解决方案" class="headerlink" title="🎉解决方案"></a>🎉解决方案</h2><p>这样解决办法就很明确了，让背景的边框渲染范围在边框内即可。但对于一个盒子而言，CSS2中无法实现。标准中明确表示过：</p><blockquote><p>Note that the background is always drawn behind the border, if any … in [CSS2].</p><p>请注意，背景始终绘制在边框后面（如果有）。</p></blockquote><p>针对这个问题，CSS3中添加了<code>background-clip</code> 属性，用于<strong>确定背景绘制区域</strong>。它有三个具值：</p><ul><li><code>border-box</code>：(初始值)背景被绘制在（剪切到）边框内</li><li><code>padding-box</code> ：背景被绘制在（填充）填充框内。</li><li><code>content-box</code>：背景被绘制在（剪切到）内容框中</li></ul><p>对比下三个效果：</p><table><thead><tr><th align="center">border-box</th><th align="center">padding-box</th><th align="center">content-box</th></tr></thead><tbody><tr><td align="center"><img src="BackgroundClip-BorderBox.jpg" alt="BackgroundClip-BorderBox"></td><td align="center"><img src="BackgroundClip-PaddingBox.jpg" alt="BackgroundClip-PaddingBox"></td><td align="center"><img src="BackgroundClip-ContentBox.jpg" alt="BackgroundClip-ContentBox"></td></tr></tbody></table><h2 id="🚧注意"><a href="#🚧注意" class="headerlink" title="🚧注意"></a>🚧注意</h2><p>CSS3背景中还有另外一个属性<code>background-origin</code>属性,用于<strong>确定背景定位区域</strong>。它也有三个具值：</p><ul><li><code>padding-box</code>：（默认值）该位置相对于填充框。</li><li><code>border-box</code> ：该位置相对于边框。</li><li><code>content-box</code>：该位置相对于内容框。</li></ul><p>给出如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background-color:#ffb6b9;</span><br><span class="line">padding:1em;</span><br><span class="line">border:1em solid hsla(0,0%,100%,0.5);</span><br></pre></td></tr></table></figure><p>然后分别控制 <code>background-origin</code> 的值，对比下效果：</p><table><thead><tr><th align="center">border-box</th><th align="center">padding-box(默认)</th><th align="center">content-box</th></tr></thead><tbody><tr><td align="center"><img src="BackgroundOrigin-BorderBox.jpg" alt="BackgroundOrigin-BorderBox"></td><td align="center"><img src="BackgroundOrigin-PaddingBox.jpg" alt="BackgroundOrigin-PaddingBox"></td><td align="center"><img src="BackgroundOrigin-ContentBox.jpg" alt="BackgroundOrigin-ContentBox"></td></tr></tbody></table><p>可以看出，<code>background-origin</code> 控制的是背景图的开始渲染位置（0,0）是相对于border、padding、还是content，而不是渲染范围。</p><h2 id="🌵最后"><a href="#🌵最后" class="headerlink" title="🌵最后"></a>🌵最后</h2><ul><li>这是 <a href="https://codepen.io/fujiayishally/pen/VJoNrL" target="_blank" rel="noopener">半透明边框的代码</a></li><li>本问题摘自《CSS揭秘》–Lea Verou的第一章，致谢</li><li>点一下 <a href="https://www.w3.org/TR/css-backgrounds-3" target="_blank" rel="noopener">📖</a> 查看更多CSS3背景标准，致敬</li></ul>]]></content>
    
    <summary type="html">
    
      假设想给一个容器设置一个白色背景和一道半透明白色边框，body背景从半透明边框透出来，该如何实现呢？
    
    </summary>
    
      <category term="前端" scheme="https://fujiayishally.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS样式" scheme="https://fujiayishally.github.io/categories/%E5%89%8D%E7%AB%AF/CSS%E6%A0%B7%E5%BC%8F/"/>
    
    
      <category term="CSS" scheme="https://fujiayishally.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS:linear-gradient 线性渐变</title>
    <link href="https://fujiayishally.github.io/2019/07/11/CSS-gradient/"/>
    <id>https://fujiayishally.github.io/2019/07/11/CSS-gradient/</id>
    <published>2019-07-11T15:13:18.000Z</published>
    <updated>2019-07-22T10:52:38.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性渐变-linear-gradient"><a href="#线性渐变-linear-gradient" class="headerlink" title="线性渐变 linear-gradient"></a>线性渐变 linear-gradient</h2><h3 id="📚语法定义"><a href="#📚语法定义" class="headerlink" title="📚语法定义"></a>📚语法定义</h3><p>CSS3线性渐变的标准写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image: linear-gradient([&lt;angle&gt; | &lt;side-or-corner&gt;,]? &lt;color-stop&gt; [,&lt;color-stop&gt;]+ );</span><br></pre></td></tr></table></figure><p>可以看出，线性渐变效果由方向（<code>&lt;angle&gt; | &lt;side-or-corner&gt;</code>可选）及起止色（<code>color-stop</code>至少一对）控制。下面将通过控制变量法，分别对这两者进行分析。</p><h3 id="🚥控制渐变方向"><a href="#🚥控制渐变方向" class="headerlink" title="🚥控制渐变方向"></a>🚥控制渐变方向</h3><p>要明白渐变方向是怎样控制的，首先要明确三个规定：</p><ol><li>规定 <code>0deg</code> 时方向为<strong>上</strong></li><li>规定 <code>0deg</code> 到 <code>180deg</code> 是顺时针方向</li><li>默认方向是 <code>180deg</code>, 向下</li></ol><p>两个颜色的渐变描述起来是这样的：<code>颜色A</code> 沿着指定方向过渡到 <code>颜色B</code>，例如为两个颜色<code>white</code>和<code>black</code>设置渐变方向：</p><ul><li><code>to bottom</code>，就是 <code>white</code> 沿着向下方向过渡到 <code>black</code></li><li><code>45deg</code>，就是 <code>white</code> 沿着 <code>45deg</code> 方向过渡到 颜色B（black）</li></ul><p>下面我用不同的方向值替换代码中的 <code>to bottom</code> 来加深理解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background: linear-gradient(to botton,white, black)</span><br></pre></td></tr></table></figure><style>    .block{width:100%;height:3em;display:inline-block;}    .linear1-1{background:linear-gradient(white,black);}    .linear1-2{background:linear-gradient(to bottom,white,black);}    .linear1-3{background:linear-gradient(to top,white,black);}    .linear1-4{background:linear-gradient(to left,white,black);}    .linear1-5{background:linear-gradient(to right, white,black);}    .linear1-6{background:linear-gradient(to left top,white,black);}    .linear1-7{background:linear-gradient(to right top,white,black);}    .linear1-8{background:linear-gradient(to left bottom,white,black);}    .linear1-9{background:linear-gradient(to right bottom,white,black);}    .linear1-10{background:linear-gradient(180deg,white,black);}    .linear1-11{background:linear-gradient(180deg,white,black);}    .linear1-12{background:linear-gradient(0deg,white,black);}    .linear1-13{background:linear-gradient(-90deg,white,black);}    .linear1-14{background:linear-gradient(90deg,white,black);}    .linear1-15{background:linear-gradient(-45deg,white,black);}    .linear1-16{background:linear-gradient(45deg,white,black);}    .linear1-17{background:linear-gradient(-135deg,white,black);}    .linear1-18{background:linear-gradient(135deg,white,black);}</style><table><thead><tr><th align="center">关键词</th><th align="center">效果</th><th align="center">角度</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">默认</td><td align="center"><div class="block linear1-1"></div></td><td align="center">180deg</td><td align="center"><div class="block linear1-10"></div></td></tr><tr><td align="center">to bottom</td><td align="center"><div class="block linear1-2"></div></td><td align="center">180deg</td><td align="center"><div class="block linear1-11"></div></td></tr><tr><td align="center">to top</td><td align="center"><div class="block linear1-3"></div></td><td align="center">0deg</td><td align="center"><div class="block linear1-12"></div></td></tr><tr><td align="center">to left</td><td align="center"><div class="block linear1-4"></div></td><td align="center">-90deg</td><td align="center"><div class="block linear1-13"></div></td></tr><tr><td align="center">to right</td><td align="center"><div class="block linear1-5"></div></td><td align="center">90deg</td><td align="center"><div class="block linear1-14"></div></td></tr><tr><td align="center">to left top</td><td align="center"><div class="block linear1-6"></div></td><td align="center">-45deg</td><td align="center"><div class="block linear1-15"></div></td></tr><tr><td align="center">to right top</td><td align="center"><div class="block linear1-7"></div></td><td align="center">45deg</td><td align="center"><div class="block linear1-16"></div></td></tr><tr><td align="center">to left bottom</td><td align="center"><div class="block linear1-8"></div></td><td align="center">-135deg</td><td align="center"><div class="block linear1-17"></div></td></tr><tr><td align="center">to right bottom</td><td align="center"><div class="block linear1-9"></div></td><td align="center">135deg</td><td align="center"><div class="block linear1-18"></div></td></tr></tbody></table><p>方向关键词的制订是有一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/linear-gradient" target="_blank" rel="noopener">演变历史的</a>。</p><h3 id="🚥控制起止颜色-lt-color-stop-gt"><a href="#🚥控制起止颜色-lt-color-stop-gt" class="headerlink" title="🚥控制起止颜色 &lt;color-stop&gt;"></a>🚥控制起止颜色 <code>&lt;color-stop&gt;</code></h3><p>起止颜色不仅仅是值两个颜色值，还包括颜色的长度。它的赋值语法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;color|stop&gt; [ &lt;percentage&gt; | &lt;length&gt; ]</span><br></pre></td></tr></table></figure><p>如何理解 <strong>“颜色的长度”</strong> 呢？借用一下<a href="https://www.zhangxinxu.com/wordpress/2013/09/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3css3-gradient%e6%96%9c%e5%90%91%e7%ba%bf%e6%80%a7%e6%b8%90%e5%8f%98/" target="_blank" rel="noopener">张鑫旭前辈一篇博文</a>中的例子：</p><blockquote><p>在一个400*300的 div 上实现一个 (100px, 100px) 到 (200px, 200px) 由红到黄的斜向线性渐变，该如何实现？</p></blockquote><p><img src="gradient.JPG" alt="线性渐变方向分析图"></p><p>一图胜千言，根据上图分析的步骤是：</p><ol><li>找出渐变方向：连接两个作用点，角度是135deg</li><li>找默认起止点：沿渐变方向画直线穿过元素中心（xy轴垂线交点），在元素渐变方向的两端，画两条渐变线的垂线，交点即<strong>默认起止点</strong></li><li>确定颜色长度：穿过作用点画渐变线垂线，交点与开始点的距离就是长度，求它的值</li></ol><p>$$<br>RedLen = 100*\sqrt{2} = 141<br>$$</p><p>$$<br>YellowLen = 200*\sqrt{2} = 282<br>$$</p><p>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image:linear-gradient(135deg,red 141px,yellow 282px);</span><br></pre></td></tr></table></figure><p>最终的渲染效果：</p><p><img src="demo.JPG" alt="最终的渲染效果"></p><p>下面将沿着从左到右的方向，通过控制颜色数和长度变量，看下各种配置在40*30的元素中如何渲(为了方便表示，r:red，y:yellow，g:green)：</p><style>    .block2{width:100%;height:3em;display:inline-block;}    .linear2-1{background:linear-gradient(to right,yellow  0%,red 0%);}    .linear2-2{background:linear-gradient(to right,yellow  0%,red 50%);}    .linear2-3{background:linear-gradient(to right,yellow  0%,red 100%);}    .linear2-4{background:linear-gradient(to right,yellow 25%,red 0%);}    .linear2-5{background:linear-gradient(to right,yellow 25%,red 50%);}    .linear2-6{background:linear-gradient(to right,yellow 50%,red 50%);}    .linear2-7{background:linear-gradient(to right,yellow 50%,red 100%);}    .linear2-8{background:linear-gradient(to right,yellow 100%,red 100%);}    .linear2-9{background:linear-gradient(to right,yellow 100%,red 0%);}    .linear2-10{background:linear-gradient(to right,yellow 0%,red 0%,green 0%);}    .linear2-11{background:linear-gradient(to right,yellow 0%,red 50%,green 100%);}    .linear2-12{background:linear-gradient(to right,yellow 25%,red 0%,green 100%);}    .linear2-13{background:linear-gradient(to right,yellow 25%,red 25%,green 100%);}    .linear2-14{background:linear-gradient(to right,yellow 25%,red 50%,green 100%);}    .linear2-15{background:linear-gradient(to right,yellow 25%,red 100%,green 100%);}    .linear2-16{background:linear-gradient(to right,yellow 100%,red 50%,green 100%);}    .linear2-17{background:linear-gradient(to right,yellow 50%,red 50%,green 50%);}    .linear2-18{background:linear-gradient(to right,yellow 100%,red 100%,green 100%);}    .linear2-31{background:linear-gradient(to right,yellow 0%,red 100%);}    .linear2-32{background:linear-gradient(to right,yellow -100%,red 100%);}    .linear2-33{background:linear-gradient(to right,yellow 0%,red 200%);}    .linear2-34{background:linear-gradient(to right,yellow -100%,red 200%);}    .linear2-35{background:linear-gradient(to right,yellow 20%, red 30%, red 45%, green 55%, green 70%, blue 80% );}    .linear2-36{background:linear-gradient(to right,yellow 20%, red 30% 45%, green 55% 70%, blue 80%);}    .linear2-37{background:linear-gradient(to right,yellow 25%, red 25%, red 50%, green 50%, green 75%, blue 75%);}    .linear2-38{background:linear-gradient(to right, yellow 25%, red 25% 50%, green 50% 75%, blue 75%);}</style><table><thead><tr><th align="center">两个颜色(yellow,red)</th><th align="center">效果</th><th align="center">三个颜色(yellow,red,green)</th><th align="center">效果</th><th align="center">其他</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">0%,0%</td><td align="center"><div class="block2 linear2-1"></div></td><td align="center">0%,0%,0%</td><td align="center"><div class="block2 linear2-10"></div></td><td align="center">y0%,r100%</td><td align="center"><div class="block2 linear2-31"></div></td></tr><tr><td align="center">0%,50%</td><td align="center"><div class="block2 linear2-2"></div></td><td align="center">0%,50%,100%</td><td align="center"><div class="block2 linear2-11"></div></td><td align="center">y-100%,r100%</td><td align="center"><div class="block2 linear2-32"></div></td></tr><tr><td align="center">0%,100%</td><td align="center"><div class="block2 linear2-3"></div></td><td align="center">25%,0%,100%</td><td align="center"><div class="block2 linear2-12"></div></td><td align="center">y0%,r200%</td><td align="center"><div class="block2 linear2-33"></div></td></tr><tr><td align="center">25%,0%</td><td align="center"><div class="block2 linear2-4"></div></td><td align="center">25%,25%,100%</td><td align="center"><div class="block2 linear2-13"></div></td><td align="center">y-100%,r200%</td><td align="center"><div class="block2 linear2-34"></div></td></tr><tr><td align="center">25%,50%</td><td align="center"><div class="block2 linear2-5"></div></td><td align="center">25%,50%,100%</td><td align="center"><div class="block2 linear2-14"></div></td><td align="center">y20%,r30%,r45%,g55%,g70%,b80%</td><td align="center"><div class="block2 linear2-35"></div></td></tr><tr><td align="center">50%,50%</td><td align="center"><div class="block2 linear2-6"></div></td><td align="center">25%,100%,100%</td><td align="center"><div class="block2 linear2-15"></div></td><td align="center">r30% 45%,g55% 70%,b80%</td><td align="center"><div class="block2 linear2-36"></div></td></tr><tr><td align="center">50%,100%</td><td align="center"><div class="block2 linear2-7"></div></td><td align="center">100%,50%,100%</td><td align="center"><div class="block2 linear2-16"></div></td><td align="center">y25%,r25%,r50%,g50%,g75%,b75%</td><td align="center"><div class="block2 linear2-37"></div></td></tr><tr><td align="center">100%,100%</td><td align="center"><div class="block2 linear2-8"></div></td><td align="center">50%,50%,50%</td><td align="center"><div class="block2 linear2-17"></div></td><td align="center">y25%,r25% 50%,g50% 75%,b75%</td><td align="center"><div class="block2 linear2-38"></div></td></tr><tr><td align="center">100%,0%</td><td align="center"><div class="block2 linear2-9"></div></td><td align="center">100%,100%,100%</td><td align="center"><div class="block2 linear2-18"></div></td><td align="center">-</td><td align="center">-</td></tr></tbody></table><p>由上表总结就是：</p><ol><li>后设颜色长度不能少于前一个颜色长度</li><li>下一个颜色会覆盖前一个颜色</li><li>两个不同颜色间存在距离才能看出渐变效果，否则就是拼接效果</li><li>起止点可以设置超过范围的值</li></ol><ul><li>除了设置颜色长度，还可通过设置两个颜色的过渡中心点位置来控制渐变。看看两者的不同：</li></ul><ol><li>设置颜色长度:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image:linear-gradient(to right, red 0%, yellow 100%);</span><br></pre></td></tr></table></figure><div style="width:50%;height:4em;background-image:linear-gradient(to right, red 0%, yellow 100%);"></div><ol start="2"><li>设置中心点:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image:linear-gradient(to right, red, 50%, yellow);</span><br></pre></td></tr></table></figure><div style="width:50%;height:4em;background-image:linear-gradient(to right, red, 50%, yellow);"></div><ul><li>来个复杂的</li></ul><ol><li>默认情况：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image:linear-gradient(to right, red, yellow, green, blue);</span><br></pre></td></tr></table></figure><div style="width:50%;height:4em;background-image:linear-gradient(to right,red,yellow,green,blue);"></div><ol start="2"><li>设置颜色长度：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image:linear-gradient(to right, red 0%, yellow 33.33%, green 66.66%, blue 100%);</span><br></pre></td></tr></table></figure><div style="width:50%;height:4em;background-image:linear-gradient(to right,red 0%,yellow 33.33%, green 66.66%,blue 100%);"></div><ol start="3"><li>设置中心点：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image:linear-gradient(to right, red, 16.67%, yellow, 50%, green, 83.33%, blue);</span><br></pre></td></tr></table></figure><div style="width:50%;height:4em;background-image:linear-gradient(to right, red, 16.67%, yellow, 50%, green, 83.33%, blue);"></div><h3 id="📚重复渐变语法定义"><a href="#📚重复渐变语法定义" class="headerlink" title="📚重复渐变语法定义"></a>📚重复渐变语法定义</h3><p>当渐变效果是重复性的，就可以用另外一个函数 <code>repeating-linear-gradient</code>来渲染。它的语法规则是这样子的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repeating-linear-gradient(  [ &lt;angle&gt; | to &lt;side-or-corner&gt; ,]? &lt;color-stop&gt; [, &lt;color-stop&gt;]+ )</span><br></pre></td></tr></table></figure><p>定义时，只需要设置最小精度过渡样式，重复部分交给渲染引擎。另外，为了更好的过渡效果，第一个和最后一个颜色应该相等。下表中会用变量替换指令的 <code>red,yellow</code>，感受下效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background:repeating-linear-gradient(to right,red,yellow);</span><br></pre></td></tr></table></figure><style>    .block3{width:100%;height:3em;display:inline-block;}    .linear3-1{background:repeating-linear-gradient(to right,red,yellow);}    .linear3-2{background:repeating-linear-gradient(to right,red 0%,yellow 100%);}    .linear3-3{background:repeating-linear-gradient(to right,red, red 12.5%, yellow 25%);}    .linear3-4{background:repeating-linear-gradient(to right,red,red 12.5%, yellow 12.5%,yellow 25%);}    .linear3-5{background:repeating-linear-gradient(to right,red,red 7.5%, yellow 7.5%,yellow 15%);}    .linear3-6{background:repeating-linear-gradient(to right,red,yellow 6.25%, red 12.5%);}</style><table><thead><tr><th align="center">变量</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">red,yellow</td><td align="center"><div class="block3 linear3-1"></div></td></tr><tr><td align="center">r0%,y100%</td><td align="center"><div class="block3 linear3-2"></div></td></tr><tr><td align="center">r,r12.5%,y25%</td><td align="center"><div class="block3 linear3-3"></div></td></tr><tr><td align="center">r,r12.5%,y12.5%,y25%</td><td align="center"><div class="block3 linear3-4"></div></td></tr><tr><td align="center">r,r3px,y7.5%,y15%</td><td align="center"><div class="block3 linear3-5"></div></td></tr><tr><td align="center">r,y6.25%,r12.5%</td><td align="center"><div class="block3 linear3-6"></div></td></tr></tbody></table><p>重复渐变可以做出多规律性的效果：</p><style>    .linear3-7{background:repeating-linear-gradient(180deg, #8ac6d1,#8ac6d1 7px, #fbd1b7 7px,#fbd1b7 9px);}    .linear3-8{background:repeating-linear-gradient(135deg, black,black 3.75%, white 3.75%,white 7.5%);}</style><table><thead><tr><th align="center">方向</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">180deg</td><td align="center"><div class="block3 linear3-7"></div></td></tr><tr><td align="center">135deg</td><td align="center"><div class="block3 linear3-8"></div></td></tr></tbody></table><p>渐变效果是可以叠加的，并且渐变颜色可以选择 <code>transparent</code>。</p><h3 id="💦兼容性"><a href="#💦兼容性" class="headerlink" title="💦兼容性"></a>💦兼容性</h3><p>渐变效果在 <code>没有-&gt;提案-&gt;各浏览器带前缀实现-&gt;标准化-&gt;去前缀</code> 过程中有所变迁，不同浏览器是否带前缀和是否带 <code>to</code> 关键词的实现混杂， <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/linear-gradient" target="_blank" rel="noopener">MDN</a> 最终给出下面跨浏览器兼容实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.grad &#123; </span><br><span class="line">  background-color: white; /* 不支持渐变的浏览器回退方案 */</span><br><span class="line">  background-image: -webkit-linear-gradient(top, black, white); /* 支持 Chrome 25 and Safari 6, iOS 6.1, Android 4.3 */</span><br><span class="line">  background-image:    -moz-linear-gradient(top,black, white); /* 支持 Firefox (3.6 to 15) */</span><br><span class="line">  background-image:      -o-linear-gradient(top,black, white); /* 支持旧 Opera (11.1 to 12.0) */ </span><br><span class="line">  background-image:         linear-gradient(to bottom,black, white); /* 标准语法; 需要最新版本 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="径向渐变-radial-gradient"><a href="#径向渐变-radial-gradient" class="headerlink" title="径向渐变 radial-gradient"></a>径向渐变 radial-gradient</h2><h3 id="📚语法定义-1"><a href="#📚语法定义-1" class="headerlink" title="📚语法定义"></a>📚语法定义</h3><p>径向渐变(Radial gradients)由其中心点、边缘形状及位置、色值结束点（color stops）定义而成。 与<code>linera-gradient()</code>一样，<code>radial-gradient()</code> 函数也创建一个<code>&lt;image&gt;</code>。它的具体语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">radial-gradient( [ circle || &lt;length&gt; ] [ at &lt;position&gt; ]? ,</span><br><span class="line">| [ ellipse || [&lt;length&gt; | &lt;percentage&gt; ]&#123;2&#125;] [ at &lt;position&gt; ]? ,</span><br><span class="line">| [ [ circle | ellipse ] || &lt;extent-keyword&gt; ] [ at &lt;position&gt; ]? ,</span><br><span class="line">| at &lt;position&gt; ,</span><br><span class="line">&lt;color-stop&gt; [ , &lt;color-stop&gt; ]+ )</span><br></pre></td></tr></table></figure><p>解析：</p><ul><li>渐变形状是圆形或椭圆形，默认值为椭圆。若为圆形，可指定一个半径长度(只能是长度值)；若为椭圆形，可指定两个对称轴半径长度（可以是长度值或百分比）。</li><li><code>&lt;position&gt;</code> 对称中心，如缺省，默认为中心点。</li><li><code>&lt;extent-keyword&gt;</code>用于描述边缘轮廓的具体位置，它的关键字及介绍如下：<table><thead><tr><th align="center">关键字</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">closest-side</td><td align="left">渐变的边缘形状与容器距离渐变中心点最近的一边相切（圆形）或者至少与距离渐变中心点最近的垂直和水平边相切（椭圆）</td></tr><tr><td align="center">closest-corner</td><td align="left">渐变的边缘形状与容器距离渐变中心点最近的一个角相交</td></tr><tr><td align="center">farthest-side</td><td align="left">与closest-side相反，边缘形状与容器距离渐变中心点最远的一边相切（或最远的垂直和水平边）</td></tr><tr><td align="center">farthest-corner</td><td align="left">渐变的边缘形状与容器距离渐变中心点最远的一个角相交</td></tr></tbody></table></li><li><code>&lt;color-stop&gt;</code>包含一个<code>&lt;color&gt;</code>值加上可选的位置值。百分比值0%，或者长度值0，表示渐变中心点；百分比值100%表示渐变射线与边缘形状相交的点。</li></ul><p>在一个3em*3em的正方形中，渲染圆形径向渐变。下表将分别控制半径长度及圆心位置，看看不同条件下的渲染效果：</p><style>    .gbox{width:3em;height:3em;display:inline-block;}    .g_circle1{background-image: radial-gradient(circle, white,black);}    .g_circle2{background-image: radial-gradient(circle at 0% 50%, white,black);}    .g_circle3{background-image: radial-gradient(circle at 0% 100%, white,black);}    .g_circle4{background-image: radial-gradient(circle at 50% 0%, white,black);}    .g_circle5{background-image: radial-gradient(circle at 100% 0%, white,black);}    .g_circle11{background-image: radial-gradient(circle 0px, white,black);}    .g_circle12{background-image: radial-gradient(circle 1px, white,black);}    .g_circle13{background-image: radial-gradient(circle 1em, white,black);}    .g_circle14{background-image: radial-gradient(circle 1.5em, white,black);}    .g_circle15{background-image: radial-gradient(circle 3em, white,black);}</style><table><thead><tr><th align="center">渐变形状</th><th align="center">默认半径时中心坐标</th><th align="center">效果</th><th align="center">默认中心时，半径长度</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">circle</td><td align="center">默认at 50%,50%</td><td align="center"><div class="gbox g_circle1"></div></td><td align="center">0px</td><td align="center"><div class="gbox g_circle11"></div></td></tr><tr><td align="center">circle</td><td align="center">at 0% 50%</td><td align="center"><div class="gbox g_circle2"></div></td><td align="center">1px</td><td align="center"><div class="gbox g_circle12"></div></td></tr><tr><td align="center">circle</td><td align="center">at 0% 100%</td><td align="center"><div class="gbox g_circle3"></div></td><td align="center">1em</td><td align="center"><div class="gbox g_circle13"></div></td></tr><tr><td align="center">circle</td><td align="center">at 50% 0%</td><td align="center"><div class="gbox g_circle4"></div></td><td align="center">1.5em</td><td align="center"><div class="gbox g_circle14"></div></td></tr><tr><td align="center">circle</td><td align="center">at 100% 0%</td><td align="center"><div class="gbox g_circle5"></div></td><td align="center">3em</td><td align="center"><div class="gbox g_circle15"></div></td></tr></tbody></table><p>在一个3em*3em的正方形中，渲染椭圆径向渐变。下表将分别控制半径长度及对称轴坐标，看看不同条件下的渲染效果：</p><style>    .gbox{width:3em;height:3em;display:inline-block;}    .g_ellipse1{background-image: radial-gradient(ellipse,white,black);}    .g_ellipse2{background-image: radial-gradient(ellipse at 0% 50%, white,black);}    .g_ellipse3{background-image: radial-gradient(ellipse at 0% 100%, white,black);}    .g_ellipse4{background-image: radial-gradient(ellipse at 50% 0%, white,black);}    .g_ellipse5{background-image: radial-gradient(ellipse at 100% 0%, white,black);}    .g_ellipse11{background-image: radial-gradient(ellipse 0px 0px, white,black);}    .g_ellipse12{background-image: radial-gradient(ellipse 1em 1em, white,black);}    .g_ellipse13{background-image: radial-gradient(ellipse 1em 1.5em, white,black);}    .g_ellipse14{background-image: radial-gradient(ellipse 1.5em 1em, white,black);}    .g_ellipse15{background-image: radial-gradient(ellipse 3em 0em, white,black);}</style><table><thead><tr><th align="center">渐变形状</th><th align="center">默认半径时中心坐标</th><th align="center">效果</th><th align="center">默认中心时，半径长度</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">ellipse</td><td align="center">默认</td><td align="center"><div class="gbox g_ellipse1"></div></td><td align="center">0px 0px</td><td align="center"><div class="gbox g_ellipse11"></div></td></tr><tr><td align="center">ellipse</td><td align="center">at 0% 50%</td><td align="center"><div class="gbox g_ellipse2"></div></td><td align="center">1em 1em</td><td align="center"><div class="gbox g_ellipse12"></div></td></tr><tr><td align="center">ellipse</td><td align="center">at 0% 100%</td><td align="center"><div class="gbox g_ellipse3"></div></td><td align="center">1em 1.5em</td><td align="center"><div class="gbox g_ellipse13"></div></td></tr><tr><td align="center">ellipse</td><td align="center">at 50% 0%</td><td align="center"><div class="gbox g_ellipse4"></div></td><td align="center">1.5em 1em</td><td align="center"><div class="gbox g_ellipse14"></div></td></tr><tr><td align="center">ellipse</td><td align="center">at 100% 0%</td><td align="center"><div class="gbox g_ellipse5"></div></td><td align="center">3em 0em</td><td align="center"><div class="gbox g_ellipse15"></div></td></tr></tbody></table><p>在一个4em*3em的正方形中，以(25%,50%)为中心坐标，配合不同的渐变形状，<code>extent-keyword</code>不同表现效果：</p><style>    .gbox{width:4em;height:3em;display:inline-block;}    .g_extent1{background-image: radial-gradient(circle closest-side at 25% 50%,white,black);}    .g_extent2{background-image: radial-gradient(circle closest-corner at 25% 50%,white,black);}    .g_extent3{background-image: radial-gradient(circle farthest-side at 25% 50%,white,black);}    .g_extent4{background-image: radial-gradient(circle farthest-corner at 25% 50%,white,black);}    .g_extent11{background-image: radial-gradient(ellipse closest-side at 25% 50%,white,black);}    .g_extent12{background-image: radial-gradient(ellipse closest-corner at 25% 50%,white,black);}    .g_extent13{background-image: radial-gradient(ellipse farthest-side at 25% 50%,white,black);}    .g_extent14{background-image: radial-gradient(ellipse farthest-corner at 25% 50%,white,black);}</style><table><thead><tr><th align="center">extent-keyword</th><th align="center">渐变形状</th><th align="center">效果</th><th align="center">渐变形状</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">closest-side</td><td align="center">circle</td><td align="center"><div class="gbox g_extent1"></div></td><td align="center">ellipse</td><td align="center"><div class="gbox g_extent11"></div></td></tr><tr><td align="center">closest-corner</td><td align="center">circle</td><td align="center"><div class="gbox g_extent2"></div></td><td align="center">ellipse</td><td align="center"><div class="gbox g_extent12"></div></td></tr><tr><td align="center">farthest-side</td><td align="center">circle</td><td align="center"><div class="gbox g_extent3"></div></td><td align="center">ellipse</td><td align="center"><div class="gbox g_extent13"></div></td></tr><tr><td align="center">farthest-corner</td><td align="center">circle</td><td align="center"><div class="gbox g_extent4"></div></td><td align="center">ellipse</td><td align="center"><div class="gbox g_extent14"></div></td></tr></tbody></table><p>radial-gradient 的 <code>&lt;color-stop&gt;</code>的定义与 linear-gradient的相同，就不赘述了。</p><p><code>radial-gradient</code>同样支持逗号赋值。下面是利用径向渐变实现的图案：</p><style>    .gshow{width:4em;height:3em;display:inline-block;}    .g_temp1{background-image: radial-gradient(circle at 50% 50%,white 49%,black 49%,black calc(49% + 1px),white calc(49% + 1px), white);}    .g_temp2{background-image: radial-gradient(16px at 60px 50%, #000000 0%, #000000 14px, rgba(0, 0, 0, 0.3) 18px, rgba(0, 0, 0, 0) 19px);}    .g_temp3{background-image: radial-gradient(ellipse farthest-corner at 50% 50%, #00FFFF 0%, rgba(0, 0, 255, 0) 50%, #0000FF 95%);}    .g_temp4{background-image: radial-gradient(ellipse farthest-corner at 50% 5%, #FFFF80 20%, rgba(204, 153, 153, 0.4) 30%, #E6E6FF 60%);}</style><table><thead><tr><th align="center">效果</th><th align="center">代码</th></tr></thead><tbody><tr><td align="center"><div class="gshow g_temp1"></div></td><td align="center"><code>circle at 50% 50%,white 49%,black 49%,black calc(49% + 1px),white calc(49% + 1px), white</code></td></tr><tr><td align="center"><div class="gshow g_temp2"></div></td><td align="center"><code>16px at 60px 50%, #000000 0%, #000000 14px, rgba(0, 0, 0, 0.3) 18px, rgba(0, 0, 0, 0) 19px</code></td></tr><tr><td align="center"><div class="gshow g_temp3"></div></td><td align="center"><code>ellipse farthest-corner at 50% 50%, #00FFFF 0%, rgba(0, 0, 255, 0) 50%, #0000FF 95%</code></td></tr><tr><td align="center"><div class="gshow g_temp4"></div></td><td align="center"><code>ellipse farthest-corner at 50% 5%, #FFFF80 20%, rgba(204, 153, 153, 0.4) 30%, #E6E6FF 60%</code></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      渐变是 image 的一种类型（gradient）,它分三种：线性、径向、圆锥。本文针对这些知识点进行了梳理。
    
    </summary>
    
      <category term="前端" scheme="https://fujiayishally.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS属性" scheme="https://fujiayishally.github.io/categories/%E5%89%8D%E7%AB%AF/CSS%E5%B1%9E%E6%80%A7/"/>
    
    
      <category term="CSS" scheme="https://fujiayishally.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>各类资源网站集</title>
    <link href="https://fujiayishally.github.io/2019/07/11/bookmarks/"/>
    <id>https://fujiayishally.github.io/2019/07/11/bookmarks/</id>
    <published>2019-07-11T13:42:58.000Z</published>
    <updated>2019-07-16T12:41:10.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="资源篇"><a href="#资源篇" class="headerlink" title="资源篇"></a>资源篇</h2><h3 id="图片资源"><a href="#图片资源" class="headerlink" title="图片资源"></a>图片资源</h3><ul><li><a href="https://pixabay.com/" target="_blank" rel="noopener">pixabay</a>:查找和分享免费的无版权图像，图片质量佳</li><li><a href="https://unsplash.com/" target="_blank" rel="noopener">unsplash</a>:图片多是风景和静物</li><li><a href="https://artsandculture.google.com/" target="_blank" rel="noopener">谷歌艺术&amp;文化</a>:提供大量高清艺术作品和历史人物、事件的高清图片</li></ul><h3 id="素材资源"><a href="#素材资源" class="headerlink" title="素材资源"></a>素材资源</h3><ul><li><a href="https://www.easyicon.net/" target="_blank" rel="noopener">easyicon</a>:提供不同尺寸的png、ico等格式图标供下载</li><li><a href="https://www.iconfont.cn/plus" target="_blank" rel="noopener">iconfont</a>:阿里巴巴旗下的图标库网站</li><li><a href="http://www.thinkcmf.com/font/search.html" target="_blank" rel="noopener">奥森图标</a>:提供丰富的矢量字体图标</li><li><a href="https://588ku.com/" target="_blank" rel="noopener">千库网</a>:免费下载图片素材的网站</li><li><a href="https://www.webfont.com/" target="_blank" rel="noopener">有字库</a>:一个免下载字体，直接在线引用字体的网站</li><li><a href="http://www.psjia.com/pssc/fontxz/list_18_3.html" target="_blank" rel="noopener">PS字体库</a>: 包含了几乎所有类型的字体，下载好安装，PS中就可以使用</li></ul><h3 id="插件资源"><a href="#插件资源" class="headerlink" title="插件资源"></a>插件资源</h3><ul><li><a href="http://www.jq22.com/" target="_blank" rel="noopener">jQuery插件1</a>:分享jQuery插件的详细使用方法,在线预览,jQuery插件下载及教程</li><li><a href="http://www.htmleaf.com/" target="_blank" rel="noopener">jQuery插件2</a>:与上一个网站类似，也提供了大量的jQuery插件</li><li><a href="https://www.layui.com/" target="_blank" rel="noopener">layui</a>:强大的模块化前端框架</li></ul><h2 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h2><h3 id="颜色处理工具"><a href="#颜色处理工具" class="headerlink" title="颜色处理工具"></a>颜色处理工具</h3><ul><li><a href="https://colorhunt.co/" target="_blank" rel="noopener">配色方案-纯色</a>:颜色搭配佳，可直接复制</li><li><a href="https://webgradients.com/" target="_blank" rel="noopener">配色方案-渐变色</a>:可直接复制渐变css代码</li><li><a href="http://www.colorhunter.com/" target="_blank" rel="noopener">颜色提取</a>:根据上传的图片提取颜色</li><li><a href="http://www.bootcss.com/p/websafecolors/" target="_blank" rel="noopener">安全色大全</a>:网站开发中经常用到的安全色方案</li><li><a href="http://www.sioe.cn/yingyong/yanse-rgb-16/" target="_blank" rel="noopener">颜色转换工具</a>:在线RGB和十六进制颜色码转换工具</li><li><a href="https://tinypng.com/" target="_blank" rel="noopener">在线图片压缩1</a>:可以批量使用</li><li><a href="https://www.picdiet.com/zh-cn" target="_blank" rel="noopener">在线图片压缩2</a>:较之上者，可自定义压缩质量</li><li><a href="http://www.xueui.cn/design/online-tools" target="_blank" rel="noopener">UI设计工具集</a></li><li><a href="http://tool.lu/" target="_blank" rel="noopener">在线工具集</a></li></ul><h2 id="框架篇"><a href="#框架篇" class="headerlink" title="框架篇"></a>框架篇</h2><ul><li><a href="https://element.eleme.cn/#/zh-CN" target="_blank" rel="noopener">Element UI </a>:一套为开发者、设计师和产品经理准备的开源组件库</li><li><a href="https://muse-ui.org/#/zh-CN" target="_blank" rel="noopener">Muse UI</a>:基于 Vue 2.0 优雅的 Material Design UI 组件库</li><li><a href="https://youzan.github.io/vant/#/zh-CN/intro" target="_blank" rel="noopener">Vant</a>:轻量、可靠的移动端 Vue 组件库</li><li><a href="https://amazeui.clouddeep.cn/" target="_blank" rel="noopener">Amaze UI</a>:中国首个开源 HTML5 跨屏前端框架</li><li><a href="https://github.com/iview/iview-admin" target="_blank" rel="noopener">iView admin</a>: 搭配使用<a href="https://www.iviewui.com/" target="_blank" rel="noopener">iView UI</a>组件库形成的一套后台集成解决方案</li></ul>]]></content>
    
    <summary type="html">
    
      收集并整理了各类资源网站供需要时查用。包括：图片资源，工具资源等。
    
    </summary>
    
      <category term="其他" scheme="https://fujiayishally.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="备忘" scheme="https://fujiayishally.github.io/tags/%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>工具指令备忘集</title>
    <link href="https://fujiayishally.github.io/2018/11/11/tools/"/>
    <id>https://fujiayishally.github.io/2018/11/11/tools/</id>
    <published>2018-11-11T15:22:06.000Z</published>
    <updated>2019-07-16T12:40:07.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>是一个博客框架，能够快速生成静态网页。支持评论、访问数统计等功能插件扩展。可以和Github域名绑定。</p><h3 id="定制主题和安装插件"><a href="#定制主题和安装插件" class="headerlink" title="定制主题和安装插件"></a>定制主题和安装插件</h3><p>我选择的<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>主题是 <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">NextT</a> (因为很多人用)。需要自定义插件和修改主题样式时，可以看这篇<a href="https://juejin.im/post/5a71ab9f518825735300ee6c#heading-35" target="_blank" rel="noopener">NexT主题的优化定制修改指南</a>。作者分门别类地收集了主题配置的各种可行操作，并预先踩实了官方文档中的一些坑，感谢。</p><h3 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h3><p>在站点配置文件 <code>_config.yml</code>中配置部署文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yourGitHubName/yourGitHubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>部署类型是git，需要安装相关工具包，否则报错<code>Deployer not found: gitgit</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>此时可以运行下面指令，构建静态页面并上传到Github</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="相关指令集"><a href="#相关指令集" class="headerlink" title="相关指令集"></a>相关指令集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;学习笔记 一&quot;</span><br></pre></td></tr></table></figure><p>新建一篇标题为 <strong>“学习笔记 一”</strong> 的文章，因为标题里有空格，所以加上了引号（也即普通命名不加引号也时可以的）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><code>hexo server</code> 的缩写，能够启动一个本地服务器，默认为地址：<code>http://localhost:4000/</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p><code>hexo generate</code> 的缩写，生成网站静态文件到默认设置的 public 文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br><span class="line">hexo d --g</span><br></pre></td></tr></table></figure><p><code>hexo deploy</code> 的缩写,第一条指令用于把静态文件部署到设定仓库。如果希望生成静态文件之后直接部署，可使用第二条指令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 <code>db.json</code> 和已生成的静态文件 <code>public</code> 。网站显示异常时可以执行这条命令试试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page aboutme</span><br></pre></td></tr></table></figure><p>新建一个标题为 <strong>aboutme</strong> 的页面，默认链接地址为 主页地址<code>/aboutme/</code></p><h3 id="博文中插入图片"><a href="#博文中插入图片" class="headerlink" title="博文中插入图片"></a>博文中插入图片</h3><p>如果博文中需要插入图片，则需要在站点配置文件 <code>_config.yml</code> 修改下面两个字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder:true</span><br><span class="line">...</span><br><span class="line">url: https://YourName.github.io</span><br></pre></td></tr></table></figure><p>并且安装插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install  hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>打开 <code>/node_modules/hexo-asset-image/index.js</code>，将内容更换为下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    <span class="keyword">var</span> link = data.permalink;</span><br><span class="line"><span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line"><span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line"><span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line"><span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">  <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">  <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">srcArray.shift();</span><br><span class="line">  src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">  $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此后，每次新建博文的同时会多生成一个同名文件，用于存放该博文需要插入的图片。在博文中这么引用图片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![你想输入的替代文字](图片名.jpg)</span><br></pre></td></tr></table></figure><h3 id="启用数学公式符号"><a href="#启用数学公式符号" class="headerlink" title="启用数学公式符号"></a>启用数学公式符号</h3><p>主题配置文件设置mathjax属性：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mathjax:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: true</span><br><span class="line">  cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML</span><br></pre></td></tr></table></figure><p>并在需要引用公式的文章中手动设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: index.html</span><br><span class="line">date: 2016-12-28 21:01:30</span><br><span class="line">tags:</span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> 是一个分布是版本控制工具，和<a href="https://github.com" target="_blank" rel="noopener">Github</a>结合强无敌。本地安装好Git之后，想要和Github配合工作还需要一些配置。</p><h3 id="配置账号"><a href="#配置账号" class="headerlink" title="配置账号"></a>配置账号</h3><p>用户名和邮箱应该与在Github上注册的一致</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email "you@example.com"</span><br><span class="line">git config --global user.name "Your Name"</span><br></pre></td></tr></table></figure><h3 id="配置SSH公钥"><a href="#配置SSH公钥" class="headerlink" title="配置SSH公钥"></a>配置SSH公钥</h3><p>Git服务器使用SSH公钥进行验证，要证明当前电脑具有提交权限就要手持一份在Github上注册了的SSH公钥。按照官方文档说的“我们需要寻找一对以 <code>id_dsa</code> 或 <code>id_rsa</code> 命名的文件，其中一个带有 <code>.pub</code> 扩展名。 <code>.pub</code> 文件是你的公钥，另一个则是私钥。”</p><p>首先，确认自己是否已经拥有密钥。打开Git Bash，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd ~/.ssh</span><br><span class="line"><span class="meta">$</span> ls</span><br></pre></td></tr></table></figure><p>如果没看到上述两个文件（或者根本没有 .ssh 目录），可运行 <code>ssh-keygen</code> 生成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh-keygen</span><br></pre></td></tr></table></figure><p>执行完后，可看到如下提示：</p><p><img src="git-1.jpg" alt="使用ssh-keygen生成ssh钥匙"></p><p>再次进入 <code>.ssh</code> 文件就可以看到生成的钥匙了。打开 <code>id_rsa.pub</code>文件，并把里面的内容复制到 GitHub &gt; Settings &gt; SSH and GPG keys &gt; new SSH key。同时还需要新建一个 <code>YourName.github.io</code>的仓库。（其实这个仓库的ssh下载地址就是 在 <code>hexo</code>&gt; <code>_config.yml</code> &gt; <code>deploy</code> &gt; <code>repo</code>配置的地址。</p><h3 id="跳过提交密码"><a href="#跳过提交密码" class="headerlink" title="跳过提交密码"></a>跳过提交密码</h3><p>每次提交代码时总会出现密码输入提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase for key &apos;/c/Users/fujia/.ssh/id_rsa&apos;</span><br></pre></td></tr></table></figure><p>如果想跳过这一步骤，需要进行下面设置：</p><ol><li>打开 <code>ssh-agent</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-agent bash</span><br></pre></td></tr></table></figure><p>如果给出错误提示：<code>unable to start ssh-agent service...</code>。就打开系统服务，找到<code>OpenSSH Authentication Agent</code>项，如果该项被禁止，把它改为自动。</p><p><img src="Open-SSH-Agent.jpg" alt="Open-SSH_Agent"></p><p>修改之后，按顺序执行下面操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -p</span><br></pre></td></tr></table></figure><p>提示输入 <code>old passphrase</code> 时输入旧密码，提示输入<code>new passphrase</code> 时，直接回车，确认密码时再次回车。</p><h2 id="VSCode-插件"><a href="#VSCode-插件" class="headerlink" title="VSCode 插件"></a>VSCode 插件</h2><h3 id="VSCode编辑器美化"><a href="#VSCode编辑器美化" class="headerlink" title="VSCode编辑器美化"></a>VSCode编辑器美化</h3><table><thead><tr><th align="center">插件名</th><th align="center">介绍</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">vscode-icons</td><td align="center">文件图标</td><td align="center">-</td></tr><tr><td align="center">GlassIt-VSC</td><td align="center">编辑器毛玻璃半透明效果</td><td align="center">挺好看的</td></tr></tbody></table><h3 id="code相关"><a href="#code相关" class="headerlink" title="code相关"></a>code相关</h3><table><thead><tr><th align="center">插件名</th><th align="center">介绍</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">search node_modules</td><td align="center">快速搜索本地node_modules文件</td><td align="center"><code>ctrl+shift+p</code> + node_module</td></tr><tr><td align="center">Bracket Pair Colorizer</td><td align="center">成对括号颜色提示</td><td align="center">-</td></tr><tr><td align="center">Vetur</td><td align="center">Vue提示</td><td align="center">-</td></tr><tr><td align="center">JavaScript (ES6) code snippets</td><td align="center">提供ES6的语法支持和片段</td><td align="center">-</td></tr><tr><td align="center">eslint</td><td align="center">格式化工具</td><td align="center">-</td></tr><tr><td align="center">Beautify</td><td align="center">格式化工具</td><td align="center">-</td></tr></tbody></table><h3 id="调试相关"><a href="#调试相关" class="headerlink" title="调试相关"></a>调试相关</h3><table><thead><tr><th align="center">插件名</th><th align="center">介绍</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">open in browser</td><td align="center">浏览器打开html页面</td><td align="center">All+B</td></tr><tr><td align="center">debugger for chrome</td><td align="center">chrome 调试插件</td><td align="center">神器，让你能在编辑器中调试</td></tr><tr><td align="center">Live Server</td><td align="center">建立本地服务器</td><td align="center">为静态和动态页面提供实时刷新功能</td></tr></tbody></table><h3 id="Git相关"><a href="#Git相关" class="headerlink" title="Git相关"></a>Git相关</h3><table><thead><tr><th align="center">插件名</th><th align="center">介绍</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">Git history</td><td align="center">看整个仓库文件的提交及修改历史</td><td align="center">-</td></tr></tbody></table><h3 id="其他辅助工具"><a href="#其他辅助工具" class="headerlink" title="其他辅助工具"></a>其他辅助工具</h3><table><thead><tr><th align="center">插件名</th><th align="center">介绍</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">Chinese (Simplified) Language Pack</td><td align="center">VSCode的简体中文包</td><td align="center">-</td></tr><tr><td align="center">Markdown Preview Enhanced</td><td align="center">markdown 预览</td><td align="center">-</td></tr><tr><td align="center">Markdown All in One</td><td align="center">为编写markdown提供了一些快捷操作</td><td align="center">-</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;hexo&quot;&gt;&lt;a href=&quot;#hexo&quot; class=&quot;headerlink&quot; title=&quot;hexo&quot;&gt;&lt;/a&gt;hexo&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
      <category term="其他" scheme="https://fujiayishally.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="备忘" scheme="https://fujiayishally.github.io/tags/%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>Install MongoDB</title>
    <link href="https://fujiayishally.github.io/2018/07/13/install-mongodb/"/>
    <id>https://fujiayishally.github.io/2018/07/13/install-mongodb/</id>
    <published>2018-07-13T03:13:14.000Z</published>
    <updated>2019-07-16T12:44:48.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先，我们需要清楚的是数据库服务器和数据库服务器驱动。</p><ol><li>在官网下载数据库服务器，本地安装</li><li>关联数据库服务器和数据存储位置，也就是建好数据存放的目录，然后把路径告诉数据库服务器,启动服务器守护进程mongod</li><li>使用命令行操作数据库进行增删改查等操作</li><li>实际开发中，我们是不会这样子直接输入命令行的，所以我们要安装数据库驱动来协助开发。<a href="https://www.npmjs.com/package/mongodb" target="_blank" rel="noopener">mongodb</a>是官方为node环境指定的Mongo驱动。</li><li>在项目中成功安装好驱动后，就可以通过驱动连接数据库并进行相关数据库操作了。</li></ol><h1 id="系统win10-64位安装"><a href="#系统win10-64位安装" class="headerlink" title="系统win10 64位安装"></a>系统win10 64位安装</h1><h2 id="安装Mogodb-service"><a href="#安装Mogodb-service" class="headerlink" title="安装Mogodb service"></a>安装Mogodb service</h2><p>到<a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="noopener">官网</a>下载安装包。安装的时候，如果不想放到默认路径，可以自己重新选择安装目录。</p><p><img src="install-mongodb-1.JPG" alt="install-mongodb-1"></p><p>安装完成后，进入<code>~安装目录/bin</code>,里面都是些mongdb的运行程序:</p><p><img src="install-mongodb-1-1.JPG" alt="install-mongodb-1-1"></p><h2 id="启动数据库"><a href="#启动数据库" class="headerlink" title="启动数据库"></a>启动数据库</h2><p>接下来我们要建立数据库服务器和数据存储地址的联系，在此之前，请先确保你的存储目录已经建好，因为MongoDB不会帮你新建，从而建联失败。<br>例如我要把数据存在<code>G:\mongodb\data\</code>下，我就得先建好这个目录，确保它能被找到。另外我们还可以新建一个日志文件<code>G:\mongodb\log\mongodb.log</code>记录日志。<br>目录建好后，运行MongoDB的守护进程<code>mongod.exe</code>，守护数据库服务器与这个地址的连接。<br>如果你在<code>~安装目录的\bin</code> 目录下，你可以这样运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; .\mongod --dbpath g:\mongodb\data</span><br></pre></td></tr></table></figure><p>但你应该不想每次都进入到该目录去运行mongod命令，解决办法是在环境变量中给<code>path</code>添加<code>~安装目录\bin</code>路径：</p><p><img src="install-mongodb-1-2.JPG" alt="install-mongodb-1-2"></p><p>然后在任何位置都可以直接运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; mongod --dbpath g:\mongodb\data</span><br></pre></td></tr></table></figure><p>如果希望看到更多帮助信息，可以这样查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; mongod --help</span><br></pre></td></tr></table></figure><p>Mongod线程启动后，会默认监听<code>27017</code>端口，这时候你用浏览器访问<code>localhost:27017</code>,会看到这句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">It looks like you are trying to access MongoDB over HTTP on the native driver port.</span><br></pre></td></tr></table></figure><p>不过每次都要指定路径也很麻烦，可以把这个设置写入windows服务里:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod.exe --logpath g:\mongodb\log\mongodb.log --logappend --dbpath g:\mongodb\data --directoryperdb --serviceName mongodb -install</span><br></pre></td></tr></table></figure><p>执行完后可以在控制面板的本地服务里看到新注册的服务:</p><p><img src="install-mongodb-1-3.JPG" alt="install-mongodb-1-3"></p><p>注册完成后，数据库服务器其实已经在后台启动了。你可以在任务管理器里看到正在运行的进程：</p><p><img src="install-mongodb-2-1.JPG" alt="install-mongodb-2-1"></p><p>回到命令行，在终端连接数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; mongodb</span><br></pre></td></tr></table></figure><p>成功连接后，你会看到一些数据库及连接相关信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MongoDB shell version v4<span class="number">.0</span><span class="number">.0</span></span><br><span class="line">connecting to: mongodb://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">27017</span></span><br><span class="line">MongoDB server version: <span class="number">4.0</span><span class="number">.0</span></span><br><span class="line">Welcome to the MongoDB shell.</span><br><span class="line">For interactive help, type <span class="string">"help"</span>.</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>至此，数据库正式启动完成，可以通过命令行操作数据库，或者你也可以起一个project，安装数据库驱动，用node来跑一个。</p><h2 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h2><p>你可以直接在命令行操作数据库，感兴趣的朋友可以参考官方的<a href="https://docs.mongodb.com/manual/mongo/" target="_blank" rel="noopener">这份文档</a>。具体的教程还是官网最好，这里就不赘述了。</p><h2 id="数据库驱动"><a href="#数据库驱动" class="headerlink" title="数据库驱动"></a>数据库驱动</h2><p><a href="https://www.npmjs.com/package/mongodb" target="_blank" rel="noopener">mongodb</a>是官方指定的node环境数据库驱动。跟着里面的教程敲一遍，mongodb的基本用法基本就到手了。这里也不赘述。<br>注意，此时，前面通过命令行<code>mongodb</code>建立的数据库连接和这里是没关系的。实际上是两种连接数据库方式。<br>如果能正确使用mongodb连接数据库，它会得到和文档一样的结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MongoClient = <span class="built_in">require</span>(<span class="string">'mongodb'</span>).MongoClient</span><br><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">'mongodb://127.0.0.1:27017'</span></span><br><span class="line"><span class="keyword">const</span> dbName = <span class="string">'test'</span> <span class="comment">//数据安装完成后，会默认有一张test表</span></span><br><span class="line"></span><br><span class="line">MongoClient.connect(url, &#123;</span><br><span class="line"> useNewUrlParser: <span class="literal">true</span></span><br><span class="line">&#125;, (err, client) =&gt; &#123;</span><br><span class="line"> assert.equal(<span class="literal">null</span>, err);</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'Connected successfully to server'</span>);</span><br><span class="line"> client.close()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>正确运行会看到下面结果：</p><p><img src="install-mongodb-4-1.JPG" alt="install-mongodb-4-1"></p><p>往后就是自己的事了，用mongodb做点有趣的事吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;首先，我们需要清楚的是数据库服务器和数据库服务器驱动。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在官网下载数据库服务器，本地安装&lt;/li&gt;
&lt;li&gt;关联数
      
    
    </summary>
    
      <category term="数据库" scheme="https://fujiayishally.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mongoDB" scheme="https://fujiayishally.github.io/tags/mongoDB/"/>
    
  </entry>
  
</feed>
