<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2-multiple-borders]]></title>
    <url>%2F2019%2F07%2F16%2F2-multiple-borders%2F</url>
    <content type="text"><![CDATA[Daily-Cute-CSS你是否有过这样的经历？看到页面上漂亮、有趣的样式效果眼前一亮，感到赏心悦目。它们的实现有的很简单，有的很复杂，这个项目就是为了收集这些效果而创建的。如果看到代码的你有更好的实现方式，或者想要分享其他有意思的效果，欢迎Issues讨论，共勉:ok_woman:。 另外话说在前头，虽然项目以“Daily”开头，但人的精力、时间总是有限的，日更会尽力而为，但保证不沉。 废话不多说，上车吧:car::bus::bullettrain_side::rocket: :seedling:今天的样式 多重边框 outline 外阴影 内阴影 :herb:本周汇总 透明的边框 多重边框 outline 外阴影 内阴影 :deciduous_tree:所有效果汇总 透明的边框 多重边框]]></content>
  </entry>
  <entry>
    <title><![CDATA[1_translucent_borders]]></title>
    <url>%2F2019%2F07%2F16%2F1-translucent-borders%2F</url>
    <content type="text"><![CDATA[透明的边框🤔问题假设想给一个容器设置一个白色背景和一道半透明白色边框，body背景从半透明边框透出来，该如何实现呢？ 思路大部分人首先想到的代码可能是这样的： 123 border:2em solid rgba(255,255,255,0.5); background:white;&#125; 但渲染出来的结果却不如意😕： 边框去哪了？再看看去掉白色背景后的渲染结果： 原来是背景色垫在边框下面，半透明的边框看不出来了。也就是说，元素的背景色有效范围是边框外边沿。 那么背景图的有效范围呢？把代码修改一下： 12border:2em solid rgba(255,255,255,0.5);background-image: linear-gradient(white 100%,transparent); 渲染结果和白色背景色时一样： 🎉解决方案这样解决办法就很明确了，让背景的边框渲染范围在边框内即可。但对于一个盒子而言，CSS2中无法实现。标准中明确表示过： Note that the background is always drawn behind the border, if any … in [CSS2]. 请注意，背景始终绘制在边框后面（如果有）。 针对这个问题，CSS3中添加了background-clip 属性，用于确定背景绘制区域。它有三个具值： border-box：(初始值)背景被绘制在（剪切到）边框内 padding-box ：背景被绘制在（填充）填充框内。 content-box：背景被绘制在（剪切到）内容框中 对比下三个效果： border-box padding-box content-box ⚠注意CSS3背景中还有另外一个属性background-origin属性,用于确定背景定位区域。它也有三个具值： padding-box：（默认值）该位置相对于填充框。 border-box ：该位置相对于边框。 content-box：该位置相对于内容框。 给出如下代码： 123background-color:#ffb6b9;padding:1em;border:1em solid hsla(0,0%,100%,0.5); 然后分别控制 background-origin 的值，对比下效果： border-box padding-box(默认) content-box 可以看出，background-origin 控制的是背景图的开始渲染位置（0,0）是相对于border、padding、还是content，而不是渲染范围。 🌵最后 这是 半透明边框的代码，这是 背景定位例子代码 本问题摘自《CSS揭秘》–Lea Verou的第一章，致谢 点一下 📖 查看更多CSS3背景标准，致敬]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS:线性渐变]]></title>
    <url>%2F2019%2F07%2F11%2FCSS-gradient%2F</url>
    <content type="text"><![CDATA[线性渐变CSS3线性渐变的标准写法： 1background-image: linear-gradient([&lt;angle&gt; | &lt;side-or-corner&gt;,]? &lt;color-stop&gt; [,&lt;color-stop&gt;]+ ); 可以看出，线性渐变效果由方向（&lt;angle&gt; | &lt;side-or-corner&gt;可选）及起止色（color-stop至少一对）控制。下面将通过控制变量法，分别对这两者进行分析。 控制渐变方向要明白渐变方向是怎样控制的，首先要明确三个规定： 规定 0deg 时方向为上 规定 0deg 到 180deg 是顺时针方向 默认方向是 180deg, 向下 两个颜色的渐变描述起来是这样的：颜色A 沿着指定方向过渡到 颜色B，例如为两个颜色white和black设置渐变方向： to bottom，就是 white 沿着向下方向过渡到 black 45deg，就是 white 沿着 45deg 方向过渡到 颜色B（black） 下面我用不同的方向值替换代码中的 to bottom 来加深理解： 1background: linear-gradient(to botton,white, black) .block{width:100%;height:3em;display:inline-block;} .linear1-1{background:linear-gradient(white,black);} .linear1-2{background:linear-gradient(to bottom,white,black);} .linear1-3{background:linear-gradient(to top,white,black);} .linear1-4{background:linear-gradient(to left,white,black);} .linear1-5{background:linear-gradient(to right, white,black);} .linear1-6{background:linear-gradient(to left top,white,black);} .linear1-7{background:linear-gradient(to right top,white,black);} .linear1-8{background:linear-gradient(to left bottom,white,black);} .linear1-9{background:linear-gradient(to right bottom,white,black);} .linear1-10{background:linear-gradient(180deg,white,black);} .linear1-11{background:linear-gradient(180deg,white,black);} .linear1-12{background:linear-gradient(0deg,white,black);} .linear1-13{background:linear-gradient(-90deg,white,black);} .linear1-14{background:linear-gradient(90deg,white,black);} .linear1-15{background:linear-gradient(-45deg,white,black);} .linear1-16{background:linear-gradient(45deg,white,black);} .linear1-17{background:linear-gradient(-135deg,white,black);} .linear1-18{background:linear-gradient(135deg,white,black);} 关键词 效果 角度 效果 默认 180deg to bottom 180deg to top 0deg to left -90deg to right 90deg to left top -45deg to right top 45deg to left bottom -135deg to right bottom 135deg 方向关键词的制订是有一个演变历史的。 控制起止颜色 &lt;color-stop&gt;起止颜色不仅仅是值两个颜色值，还包括颜色的长度。它的赋值语法是： 1&lt;color|stop&gt; [ &lt;percentage&gt; | &lt;length&gt; ] 如何理解 “颜色的长度” 呢？借用一下张鑫旭前辈一篇博文中的例子： 在一个400*300的 div 上实现一个 (100px, 100px) 到 (200px, 200px) 由红到黄的斜向线性渐变，该如何实现？ 一图胜千言，根据上图分析的步骤是： 找出渐变方向：连接两个作用点，角度是135deg 找默认起止点：沿渐变方向画直线穿过元素中心（xy轴垂线交点），在元素渐变方向的两端，画两条渐变线的垂线，交点即默认起止点 确定颜色长度：穿过作用点画渐变线垂线，交点与开始点的距离就是长度，求它的值 $$RedLen = 100*\sqrt{2} = 141$$ $$YellowLen = 200*\sqrt{2} = 282$$ 代码： 1background-image:linear-gradient(135deg,red 141px,yellow 282px); 最终的渲染效果： 下面将沿着从左到右的方向，通过控制颜色数和长度变量，看下各种配置在40*30的元素中如何渲(为了方便表示，r:red，y:yellow，g:green)： .block2{width:100%;height:3em;display:inline-block;} .linear2-1{background:linear-gradient(to right,yellow 0%,red 0%);} .linear2-2{background:linear-gradient(to right,yellow 0%,red 50%);} .linear2-3{background:linear-gradient(to right,yellow 0%,red 100%);} .linear2-4{background:linear-gradient(to right,yellow 25%,red 0%);} .linear2-5{background:linear-gradient(to right,yellow 25%,red 50%);} .linear2-6{background:linear-gradient(to right,yellow 50%,red 50%);} .linear2-7{background:linear-gradient(to right,yellow 50%,red 100%);} .linear2-8{background:linear-gradient(to right,yellow 100%,red 100%);} .linear2-9{background:linear-gradient(to right,yellow 100%,red 0%);} .linear2-10{background:linear-gradient(to right,yellow 0%,red 0%,green 0%);} .linear2-11{background:linear-gradient(to right,yellow 0%,red 50%,green 100%);} .linear2-12{background:linear-gradient(to right,yellow 25%,red 0%,green 100%);} .linear2-13{background:linear-gradient(to right,yellow 25%,red 25%,green 100%);} .linear2-14{background:linear-gradient(to right,yellow 25%,red 50%,green 100%);} .linear2-15{background:linear-gradient(to right,yellow 25%,red 100%,green 100%);} .linear2-16{background:linear-gradient(to right,yellow 100%,red 50%,green 100%);} .linear2-17{background:linear-gradient(to right,yellow 50%,red 50%,green 50%);} .linear2-18{background:linear-gradient(to right,yellow 100%,red 100%,green 100%);} .linear2-31{background:linear-gradient(to right,yellow 0%,red 100%);} .linear2-32{background:linear-gradient(to right,yellow -100%,red 100%);} .linear2-33{background:linear-gradient(to right,yellow 0%,red 200%);} .linear2-34{background:linear-gradient(to right,yellow -100%,red 200%);} .linear2-35{background:linear-gradient(to right,yellow 20%, red 30%, red 45%, green 55%, green 70%, blue 80% );} .linear2-36{background:linear-gradient(to right,yellow 20%, red 30% 45%, green 55% 70%, blue 80%);} .linear2-37{background:linear-gradient(to right,yellow 25%, red 25%, red 50%, green 50%, green 75%, blue 75%);} .linear2-38{background:linear-gradient(to right, yellow 25%, red 25% 50%, green 50% 75%, blue 75%);} 两个颜色(yellow,red) 效果 三个颜色(yellow,red,green) 效果 其他 效果 0%,0% 0%,0%,0% y0%,r100% 0%,50% 0%,50%,100% y-100%,r100% 0%,100% 25%,0%,100% y0%,r200% 25%,0% 25%,25%,100% y-100%,r200% 25%,50% 25%,50%,100% y20%,r30%,r45%,g55%,g70%,b80% 50%,50% 25%,100%,100% r30% 45%,g55% 70%,b80% 50%,100% 100%,50%,100% y25%,r25%,r50%,g50%,g75%,b75% 100%,100% 50%,50%,50% y25%,r25% 50%,g50% 75%,b75% 100%,0% 100%,100%,100% - - 由上表总结就是： 后设颜色长度不能少于前一个颜色长度 下一个颜色会覆盖前一个颜色 两个不同颜色间存在距离才能看出渐变效果，否则就是拼接效果 起止点可以设置超过范围的值 除了设置颜色长度，还可通过设置两个颜色的过渡中心点位置来控制渐变。看看两者的不同： 设置颜色长度: 1background-image:linear-gradient(to right, red 0%, yellow 100%); 设置中心点: 1background-image:linear-gradient(to right, red, 50%, yellow); 来个复杂的 默认情况： 1background-image:linear-gradient(to right, red, yellow, green, blue); 设置颜色长度： 1background-image:linear-gradient(to right, red 0%, yellow 33.33%, green 66.66%, blue 100%); 设置中心点： 1background-image:linear-gradient(to right, red, 16.67%, yellow, 50%, green, 83.33%, blue); 重复渐变当渐变效果是重复性的，就可以用另外一个函数 repeating-linear-gradient来渲染。它的语法规则是这样子的： 1repeating-linear-gradient( [ &lt;angle&gt; | to &lt;side-or-corner&gt; ,]? &lt;color-stop&gt; [, &lt;color-stop&gt;]+ ) 定义时，只需要设置最小精度过渡样式，重复部分交给渲染引擎。另外，为了更好的过渡效果，第一个和最后一个颜色应该相等。下表中会用变量替换指令的 red,yellow，感受下效果： 1background:repeating-linear-gradient(to right,red,yellow); .block3{width:100%;height:3em;display:inline-block;} .linear3-1{background:repeating-linear-gradient(to right,red,yellow);} .linear3-2{background:repeating-linear-gradient(to right,red 0%,yellow 100%);} .linear3-3{background:repeating-linear-gradient(to right,red, red 12.5%, yellow 25%);} .linear3-4{background:repeating-linear-gradient(to right,red,red 12.5%, yellow 12.5%,yellow 25%);} .linear3-5{background:repeating-linear-gradient(to right,red,red 7.5%, yellow 7.5%,yellow 15%);} .linear3-6{background:repeating-linear-gradient(to right,red,yellow 6.25%, red 12.5%);} 变量 效果 red,yellow r0%,y100% r,r12.5%,y25% r,r12.5%,y12.5%,y25% r,r3px,y7.5%,y15% r,y6.25%,r12.5% 重复渐变可以做出多规律性的效果： .linear3-7{background:repeating-linear-gradient(180deg, #8ac6d1,#8ac6d1 7px, #fbd1b7 7px,#fbd1b7 9px);} .linear3-8{background:repeating-linear-gradient(135deg, black,black 3.75%, white 3.75%,white 7.5%);} 方向 效果 180deg 135deg 效果叠加渐变效果是可以叠加的，并且渐变颜色可以选择 transparent。 兼容性渐变效果在 没有-&gt;提案-&gt;各浏览器带前缀实现-&gt;标准化-&gt;去前缀 过程中有所变迁，不同浏览器是否带前缀和是否带 to 关键词的实现混杂， MDN 最终给出下面跨浏览器兼容实现： 1234567.grad &#123; background-color: white; /* 不支持渐变的浏览器回退方案 */ background-image: -webkit-linear-gradient(top, black, white); /* 支持 Chrome 25 and Safari 6, iOS 6.1, Android 4.3 */ background-image: -moz-linear-gradient(top,black, white); /* 支持 Firefox (3.6 to 15) */ background-image: -o-linear-gradient(top,black, white); /* 支持旧 Opera (11.1 to 12.0) */ background-image: linear-gradient(to bottom,black, white); /* 标准语法; 需要最新版本 */&#125;]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[各类资源网站集]]></title>
    <url>%2F2019%2F07%2F11%2Fbookmarks%2F</url>
    <content type="text"><![CDATA[资源篇图片资源 pixabay:查找和分享免费的无版权图像，图片质量佳 unsplash:图片多是风景和静物 谷歌艺术&amp;文化:提供大量高清艺术作品和历史人物、事件的高清图片 素材资源 easyicon:提供不同尺寸的png、ico等格式图标供下载 iconfont:阿里巴巴旗下的图标库网站 奥森图标:提供丰富的矢量字体图标 千库网:免费下载图片素材的网站 有字库:一个免下载字体，直接在线引用字体的网站 PS字体库: 包含了几乎所有类型的字体，下载好安装，PS中就可以使用 插件资源 jQuery插件1:分享jQuery插件的详细使用方法,在线预览,jQuery插件下载及教程 jQuery插件2:与上一个网站类似，也提供了大量的jQuery插件 layui:强大的模块化前端框架 工具篇颜色处理工具 配色方案-纯色:颜色搭配佳，可直接复制 配色方案-渐变色:可直接复制渐变css代码 颜色提取:根据上传的图片提取颜色 安全色大全:网站开发中经常用到的安全色方案 颜色转换工具:在线RGB和十六进制颜色码转换工具 在线图片压缩1:可以批量使用 在线图片压缩2:较之上者，可自定义压缩质量 UI设计工具集 在线工具集 框架篇 Element UI :一套为开发者、设计师和产品经理准备的开源组件库 Muse UI:基于 Vue 2.0 优雅的 Material Design UI 组件库 Vant:轻量、可靠的移动端 Vue 组件库 Amaze UI:中国首个开源 HTML5 跨屏前端框架 iView admin: 搭配使用iView UI组件库形成的一套后台集成解决方案]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>备忘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工具指令备忘集]]></title>
    <url>%2F2018%2F11%2F11%2Ftools%2F</url>
    <content type="text"><![CDATA[hexohexo是一个博客框架，能够快速生成静态网页。支持评论、访问数统计等功能插件扩展。可以和Github域名绑定。 定制主题和安装插件我选择的hexo主题是 NextT (因为很多人用)。需要自定义插件和修改主题样式时，可以看这篇NexT主题的优化定制修改指南。作者分门别类地收集了主题配置的各种可行操作，并预先踩实了官方文档中的一些坑，感谢。 部署到github在站点配置文件 _config.yml中配置部署文件 1234deploy: type: git repo: git@github.com:yourGitHubName/yourGitHubName.github.io.git branch: master 部署类型是git，需要安装相关工具包，否则报错Deployer not found: gitgit： 1npm install hexo-deployer-git --save 此时可以运行下面指令，构建静态页面并上传到Github 1hexo d 相关指令集1hexo new &quot;学习笔记 一&quot; 新建一篇标题为 “学习笔记 一” 的文章，因为标题里有空格，所以加上了引号（也即普通命名不加引号也时可以的）。 1hexo s hexo server 的缩写，能够启动一个本地服务器，默认为地址：http://localhost:4000/。 1hexo g hexo generate 的缩写，生成网站静态文件到默认设置的 public 文件夹 12hexo dhexo d --g hexo deploy 的缩写,第一条指令用于把静态文件部署到设定仓库。如果希望生成静态文件之后直接部署，可使用第二条指令。 1hexo clean 清除缓存文件 db.json 和已生成的静态文件 public 。网站显示异常时可以执行这条命令试试。 1hexo new page aboutme 新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/ 博文中插入图片如果博文中需要插入图片，则需要在站点配置文件 _config.yml 修改下面两个字段： 123post_asset_folder:true...url: https://YourName.github.io 并且安装插件： 1npm install hexo-asset-image --save 打开 /node_modules/hexo-asset-image/index.js，将内容更换为下面的代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061'use strict';var cheerio = require('cheerio');// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-stringfunction getPosition(str, m, i) &#123; return str.split(m, i).join(m).length;&#125;var version = String(hexo.version).split('.');hexo.extend.filter.register('after_post_render', function(data)&#123; var config = hexo.config; if(config.post_asset_folder)&#123; var link = data.permalink; if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3) var beginPos = getPosition(link, '/', 1) + 1; else var beginPos = getPosition(link, '/', 3) + 1; // In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html". var endPos = link.lastIndexOf('/') + 1; link = link.substring(beginPos, endPos); var toprocess = ['excerpt', 'more', 'content']; for(var i = 0; i &lt; toprocess.length; i++)&#123; var key = toprocess[i]; var $ = cheerio.load(data[key], &#123; ignoreWhitespace: false, xmlMode: false, lowerCaseTags: false, decodeEntities: false &#125;); $('img').each(function()&#123; if ($(this).attr('src'))&#123; // For windows style path, we replace '\' to '/'. var src = $(this).attr('src').replace('\\', '/'); if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp; !/^\s*\//.test(src)) &#123; // For "about" page, the first part of "src" can't be removed. // In addition, to support multi-level local directory. var linkArray = link.split('/').filter(function(elem)&#123; return elem != ''; &#125;); var srcArray = src.split('/').filter(function(elem)&#123; return elem != '' &amp;&amp; elem != '.'; &#125;); if(srcArray.length &gt; 1) srcArray.shift(); src = srcArray.join('/'); $(this).attr('src', config.root + link + src); console.info&amp;&amp;console.info("update link as:--&gt;"+config.root + link + src); &#125; &#125;else&#123; console.info&amp;&amp;console.info("no src attr, skipped..."); console.info&amp;&amp;console.info($(this)); &#125; &#125;); data[key] = $.html(); &#125; &#125;&#125;); 此后，每次新建博文的同时会多生成一个同名文件，用于存放该博文需要插入的图片。在博文中这么引用图片： 1![你想输入的替代文字](图片名.jpg) 启用数学公式符号主题配置文件设置mathjax属性： 1234mathjax: enable: true per_page: true cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML 并在需要引用公式的文章中手动设置： 123456---title: index.htmldate: 2016-12-28 21:01:30tags:mathjax: true--- GitGit 是一个分布是版本控制工具，和Github结合强无敌。本地安装好Git之后，想要和Github配合工作还需要一些配置。 配置账号用户名和邮箱应该与在Github上注册的一致 12git config --global user.email "you@example.com"git config --global user.name "Your Name" 配置SSH公钥Git服务器使用SSH公钥进行验证，要证明当前电脑具有提交权限就要手持一份在Github上注册了的SSH公钥。按照官方文档说的“我们需要寻找一对以 id_dsa 或 id_rsa 命名的文件，其中一个带有 .pub 扩展名。 .pub 文件是你的公钥，另一个则是私钥。” 首先，确认自己是否已经拥有密钥。打开Git Bash，输入： 12$ cd ~/.ssh$ ls 如果没看到上述两个文件（或者根本没有 .ssh 目录），可运行 ssh-keygen 生成： 1$ ssh-keygen 执行完后，可看到如下提示： 再次进入 .ssh 文件就可以看到生成的钥匙了。打开 id_rsa.pub文件，并把里面的内容复制到 GitHub &gt; Settings &gt; SSH and GPG keys &gt; new SSH key。同时还需要新建一个 YourName.github.io的仓库。（其实这个仓库的ssh下载地址就是 在 hexo&gt; _config.yml &gt; deploy &gt; repo配置的地址。 跳过提交密码每次提交代码时总会出现密码输入提示： 1Enter passphrase for key &apos;/c/Users/fujia/.ssh/id_rsa&apos; 如果想跳过这一步骤，需要进行下面设置： 打开 ssh-agent 1$ ssh-agent bash 如果给出错误提示：unable to start ssh-agent service...。就打开系统服务，找到OpenSSH Authentication Agent项，如果该项被禁止，把它改为自动。 修改之后，按顺序执行下面操作： 1$ ssh-keygen -p 提示输入 old passphrase 时输入旧密码，提示输入new passphrase 时，直接回车，确认密码时再次回车。 VSCode 插件VSCode编辑器美化 插件名 介绍 备注 vscode-icons 文件图标 - GlassIt-VSC 编辑器毛玻璃半透明效果 挺好看的 code相关 插件名 介绍 备注 search node_modules 快速搜索本地node_modules文件 ctrl+shift+p + node_module Bracket Pair Colorizer 成对括号颜色提示 - Vetur Vue提示 - JavaScript (ES6) code snippets 提供ES6的语法支持和片段 - eslint 格式化工具 - Beautify 格式化工具 - 调试相关 插件名 介绍 备注 open in browser 浏览器打开html页面 All+B debugger for chrome chrome 调试插件 神器，让你能在编辑器中调试 Live Server 建立本地服务器 为静态和动态页面提供实时刷新功能 Git相关 插件名 介绍 备注 Git history 看整个仓库文件的提交及修改历史 - 其他辅助工具 插件名 介绍 备注 Chinese (Simplified) Language Pack VSCode的简体中文包 - Markdown Preview Enhanced markdown 预览 - Markdown All in One 为编写markdown提供了一些快捷操作 -]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>备忘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install MongoDB]]></title>
    <url>%2F2018%2F07%2F13%2Finstall-mongodb%2F</url>
    <content type="text"><![CDATA[前言首先，我们需要清楚的是数据库服务器和数据库服务器驱动。 在官网下载数据库服务器，本地安装 关联数据库服务器和数据存储位置，也就是建好数据存放的目录，然后把路径告诉数据库服务器,启动服务器守护进程mongod 使用命令行操作数据库进行增删改查等操作 实际开发中，我们是不会这样子直接输入命令行的，所以我们要安装数据库驱动来协助开发。mongodb是官方为node环境指定的Mongo驱动。 在项目中成功安装好驱动后，就可以通过驱动连接数据库并进行相关数据库操作了。 系统win10 64位安装安装Mogodb service到官网下载安装包。安装的时候，如果不想放到默认路径，可以自己重新选择安装目录。 安装完成后，进入~安装目录/bin,里面都是些mongdb的运行程序: 启动数据库接下来我们要建立数据库服务器和数据存储地址的联系，在此之前，请先确保你的存储目录已经建好，因为MongoDB不会帮你新建，从而建联失败。例如我要把数据存在G:\mongodb\data\下，我就得先建好这个目录，确保它能被找到。另外我们还可以新建一个日志文件G:\mongodb\log\mongodb.log记录日志。目录建好后，运行MongoDB的守护进程mongod.exe，守护数据库服务器与这个地址的连接。如果你在~安装目录的\bin 目录下，你可以这样运行： 1&gt; .\mongod --dbpath g:\mongodb\data 但你应该不想每次都进入到该目录去运行mongod命令，解决办法是在环境变量中给path添加~安装目录\bin路径： 然后在任何位置都可以直接运行： 1&gt; mongod --dbpath g:\mongodb\data 如果希望看到更多帮助信息，可以这样查看： 1&gt; mongod --help Mongod线程启动后，会默认监听27017端口，这时候你用浏览器访问localhost:27017,会看到这句话 1It looks like you are trying to access MongoDB over HTTP on the native driver port. 不过每次都要指定路径也很麻烦，可以把这个设置写入windows服务里: 1mongod.exe --logpath g:\mongodb\log\mongodb.log --logappend --dbpath g:\mongodb\data --directoryperdb --serviceName mongodb -install 执行完后可以在控制面板的本地服务里看到新注册的服务: 注册完成后，数据库服务器其实已经在后台启动了。你可以在任务管理器里看到正在运行的进程： 回到命令行，在终端连接数据库： 1&gt; mongodb 成功连接后，你会看到一些数据库及连接相关信息： 123456MongoDB shell version v4.0.0connecting to: mongodb://127.0.0.1:27017MongoDB server version: 4.0.0Welcome to the MongoDB shell.For interactive help, type "help".... 至此，数据库正式启动完成，可以通过命令行操作数据库，或者你也可以起一个project，安装数据库驱动，用node来跑一个。 操作数据库你可以直接在命令行操作数据库，感兴趣的朋友可以参考官方的这份文档。具体的教程还是官网最好，这里就不赘述了。 数据库驱动mongodb是官方指定的node环境数据库驱动。跟着里面的教程敲一遍，mongodb的基本用法基本就到手了。这里也不赘述。注意，此时，前面通过命令行mongodb建立的数据库连接和这里是没关系的。实际上是两种连接数据库方式。如果能正确使用mongodb连接数据库，它会得到和文档一样的结果： 123456789101112const MongoClient = require('mongodb').MongoClientconst assert = require('assert')const url = 'mongodb://127.0.0.1:27017'const dbName = 'test' //数据安装完成后，会默认有一张test表MongoClient.connect(url, &#123; useNewUrlParser: true&#125;, (err, client) =&gt; &#123; assert.equal(null, err); console.log('Connected successfully to server'); client.close()&#125;) 正确运行会看到下面结果： 往后就是自己的事了，用mongodb做点有趣的事吧！]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongoDB</tag>
      </tags>
  </entry>
</search>
